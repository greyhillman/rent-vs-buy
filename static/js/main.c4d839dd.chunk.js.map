{"version":3,"sources":["primitive/Label.tsx","primitive/NumberInput.tsx","primitive/PercentInput.tsx","Income.tsx","Expenses.tsx","Both.tsx","model/Dynamic.ts","model/Mortgage.ts","primitive/Checkbox.tsx","primitive/CurrencyOutput.tsx","Mortgage.tsx","Property.tsx","PropertyExpenses.tsx","Buy.tsx","model/Property.ts","RentPlace.tsx","model/RentPlace.ts","model/Array.ts","model/RentPlaces.ts","RentPlaces.tsx","Rent.tsx","Summary.tsx","TOutline.tsx","DualBreakdown.tsx","model/Account.ts","model/Option.ts","model/Tree.ts","model/Buy.ts","model/Rent.ts","App.tsx","index.tsx"],"names":["Label","props","help","className","undefined","name","children","useOnChange","options","x","onChange","min","max","Math","clamp","NumberInput","type","step","value","event","target","disabled","enabled","PercentInput","e","Test","salary","current","update","rate_of_return","Expenses","utilities","internet","other","Both","years","principal","monthly","Income","roi","useDynamic","initial","useState","setCurrent","new_value","_","calculate_monthly_rate","mortgage","r","interest_rate","n","length","Checkbox","checked","CurrencyOutput","CAD","Intl","NumberFormat","style","currency","maximumFractionDigits","minimumFractionDigits","format","Mortgage","use_principal","useEffect","downpayment","valuation","rate","monthly_payment","Property","purchasePrice","purchase_price","final_value","PropertyExpenses","tax_rate","maintenance","additional","useMortgageValuation","data","values","useMemo","push","monthly_rate","month","get_mortgage_values","useCallback","year","Buy","property","initial_value","create_valuation","useProperty","house_price","useMortgage","expenses","total_expenses_for","property_value","property_tax_rate","tax","value_at","expenses_for","RentPlace","rent","include_utilities","include_internet","rent_change","includes","useRentPlace","true_rent","max_years","Array","prototype","sum","this","reduce","acc","zip","min_length","filter","i","map","zip_with","fn","replace_at","index","calculate_total_rent_for","places","place","last","calculate_last_year","total_years","p","can_add","useRentPlaces","R","add_enabled","add","update_initial","new_place","current_place","slice","update_at","update_last","new_valuation","LastRentPlace","Error","RentPlaces","total_valuation","new_year","calculate_max_year_for","onClick","Rent","onRentChange","Summary","buy","BlockCurrencyOutput","Account","details","detail","TOutline","left","right","YearSelect","year_options","selected","BalanceOutline","assets","liabilities","IncomeOutline","income","DualBreakdown","year_select","year_breakdown","id","profit","capital","leaf_account","tree_sum","tree","c","from_accounts","evaluate_option","eval_year","num_years","year_breakdowns","prev_capital","breakdown","final","get_capital_account","get_profit_account","get_breakdown","total","get_capital_accounts","investments","get_profit_accounts","get_property_accounts","get_monthly_accounts","useBuy","mortgage_value","house_value","buy_data","monthly_expenses","payments_for","buy_breakdown","calculate_buy_breakdown","states","get_buy_breakdown","useRent","rents","monthly_data","rent_data","rent_breakdown","calculate_rent_breakdown","get_rent_breakdown","useBoth","useMonthlyExpenses","useIncome","App","both","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4d839dd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Label.scss\";\n\nexport interface LabelProps {\n    name: string;\n    help?: string;\n}\n\nconst Label: React.FC<LabelProps> = (props) => {\n    const help = props.help ? <p className=\"help\">{props.help}</p> : undefined;\n\n    return (\n        <label>\n            <strong>{props.name}</strong>\n            <div className=\"input\">{props.children}</div>\n            {help}\n        </label>\n    );\n};\n\nexport default Label;\n","import { props } from \"ramda\";\nimport React from \"react\";\nimport \"./Input.scss\";\n\ninterface Props {\n    min?: number;\n    max?: number;\n    step?: number;\n    value: number;\n    onChange: (x: number) => void;\n    enabled?: boolean;\n}\n\nfunction clamp(x: number, min?: number, max?: number): number {\n    if (min) {\n        x = Math.max(x, min);\n    }\n    if (max) {\n        x = Math.min(x, max);\n    }\n\n    return x;\n}\n\ninterface Options {\n    onChange: (x: number) => void;\n    min?: number;\n    max?: number;\n}\n\nfunction useOnChange(options: Options): (x: number) => void {\n    return (x: number) => {\n        options.onChange(clamp(x, options.min, options.max));\n    };\n}\n\nconst NumberInput: React.FC<Props> = (props) => {\n    const onChange = useOnChange(props);\n\n    return (\n        <input\n            type=\"number\"\n            min={props.min}\n            max={props.max}\n            step={props.step ?? 1}\n            value={props.value}\n            onChange={(event) => onChange(+event.target.value)}\n            disabled={!(props.enabled ?? true)}\n        />\n    );\n};\n\nexport default NumberInput;\n","import React from \"react\";\nimport \"./Input.scss\";\n\ninterface Props {\n    value: number;\n    step?: number;\n    onChange: (x: number) => void;\n}\n\nconst PercentInput: React.FC<Props> = (props) => {\n    return (\n        <input\n            min={0}\n            max={100}\n            step={props.step ?? 1}\n            type=\"number\"\n            value={props.value}\n            onChange={(e) => props.onChange(+e.target.value)}\n        />\n    );\n};\n\nexport default PercentInput;\n","import React from \"react\";\nimport Label from \"./primitive/Label\";\nimport NumberInput from \"./primitive/NumberInput\";\nimport PercentInput from \"./primitive/PercentInput\";\nimport { Dynamic } from \"./model/Dynamic\";\n\ninterface Props {\n    salary: Dynamic<number>;\n    rate_of_return: Dynamic<number>;\n}\n\nconst Test: React.FC<Props> = (props) => {\n    return (\n        <fieldset>\n            <legend>Yearly Income</legend>\n            <Label\n                name=\"Gross income\"\n                help=\"What is your yearly gross income? This is your income before taxes and expenses.\"\n            >\n                <NumberInput\n                    min={0}\n                    step={1_000}\n                    value={props.salary.current}\n                    onChange={props.salary.update}\n                />\n            </Label>\n            <Label\n                name=\"Rate of return (%)\"\n                help=\"What is the compunded rate of return on your investments?\"\n            >\n                <PercentInput\n                    value={props.rate_of_return.current}\n                    onChange={props.rate_of_return.update}\n                />\n            </Label>\n        </fieldset>\n    );\n};\n\nexport default Test;\n","import React, { useMemo, useState } from \"react\";\nimport Label from \"./primitive/Label\";\nimport NumberInput from \"./primitive/NumberInput\";\nimport { Dynamic } from \"./model/Dynamic\";\n\ninterface Props {\n    utilities: Dynamic<number>;\n    internet: Dynamic<number>;\n    other: Dynamic<number>;\n}\n\nconst Expenses: React.FC<Props> = (props) => {\n    return (\n        <fieldset>\n            <legend>Monthly Expenses</legend>\n            <Label\n                name=\"Utilities\"\n                help=\"How much do you spend on utilities? (hydro + electricity + sewage)\"\n            >\n                <NumberInput\n                    min={0}\n                    step={100}\n                    value={props.utilities.current}\n                    onChange={props.utilities.update}\n                />\n            </Label>\n            <Label\n                name=\"Internet\"\n                help=\"How much do you spend per monthy on internet?\"\n            >\n                <NumberInput\n                    min={0}\n                    step={20}\n                    value={props.internet.current}\n                    onChange={props.internet.update}\n                />\n            </Label>\n            <Label\n                name=\"Other\"\n                help=\"How much do you spend per month on other expenses? These should be expenses that are not specific to either renting or buying like groceries, car insurance, etc.\"\n            >\n                <NumberInput\n                    min={0}\n                    step={100}\n                    value={props.other.current}\n                    onChange={props.other.update}\n                />\n            </Label>\n        </fieldset>\n    );\n};\n\nexport default Expenses;\n","import React from \"react\";\nimport Income from \"./Income\";\nimport Label from \"./primitive/Label\";\nimport NumberInput from \"./primitive/NumberInput\";\nimport { Dynamic } from \"./model/Dynamic\";\nimport Expenses from \"./Expenses\";\n\ninterface Props {\n    principal: Dynamic<number>;\n    years: Dynamic<number>;\n    salary: Dynamic<number>;\n    roi: Dynamic<number>;\n    monthly: {\n        utilities: Dynamic<number>;\n        internet: Dynamic<number>;\n        other: Dynamic<number>;\n    };\n}\n\nconst Both: React.FC<Props> = (props) => {\n    return (\n        <section className=\"both\">\n            <h3>During Both Options</h3>\n            <Label\n                name=\"Years\"\n                help=\"How many years do you plan on renting or staying?\"\n            >\n                <NumberInput\n                    min={1}\n                    step={1}\n                    value={props.years.current}\n                    onChange={props.years.update}\n                />\n            </Label>\n            <Label\n                name=\"Principal\"\n                help=\"How much assets do you have before you rent/buy? If you buy, this is typically the downpayment.\"\n            >\n                <NumberInput\n                    min={0}\n                    step={1000}\n                    value={props.principal.current}\n                    onChange={props.principal.update}\n                />\n            </Label>\n            <Expenses\n                internet={props.monthly.internet}\n                utilities={props.monthly.utilities}\n                other={props.monthly.other}\n            />\n            <Income salary={props.salary} rate_of_return={props.roi} />\n        </section>\n    );\n};\n\nexport default Both;\n","import { useState } from \"react\";\nimport { Event } from \"./Event\";\n\n// This is basically like a Dynamic from Haskell's `reflex` library.\n// Because it uses React's `useState` under-the-hood, it does not have\n// the same denotational semantics as `reflex` does.\nexport interface Dynamic<T> {\n    readonly current: T;\n    readonly update: Event<T>;\n}\n\nexport function useDynamic<T>(initial: T): Dynamic<T> {\n    // Have to use function initializer as passing in a function for `initial`\n    // would just evaluate the function.\n    const [current, setCurrent] = useState(() => initial);\n\n    return {\n        current,\n        update: (new_value) => {\n            setCurrent((_) => new_value);\n        },\n    };\n}\n","export interface Mortgage {\n    value: number;\n    interest_rate: number;\n    length: number;\n}\n\nexport type MortgageValuation = (year: number) => number;\n\n// https://www.wikihow.com/Calculate-Mortgage-Payments#Calculating-Mortgage-Payments-with-an-Equation\nexport function calculate_monthly_rate(mortgage: Mortgage): number {\n    const r = mortgage.interest_rate / 12;\n    const n = mortgage.length * 12;\n    const P = mortgage.value;\n\n    const monthly_payment = (P * (r * (1 + r) ** n)) / ((1 + r) ** n - 1);\n\n    return monthly_payment;\n}\n\nconst EPSILON = 0.0001;\n\nexport function get_mortgage_values(data: Mortgage): number[] {\n    const values = [];\n    let value = data.value;\n\n    values.push(value);\n\n    const monthly_rate = calculate_monthly_rate(data);\n\n    while (value > EPSILON) {\n        for (let month = 1; month <= 12; month++) {\n            const interest = value * (data.interest_rate / 12);\n\n            value = value + interest - monthly_rate;\n        }\n\n        if (value > 0) {\n            values.push(value);\n        }\n    }\n\n    return values;\n}\n","import React from \"react\";\nimport \"./Checkbox.scss\";\n\ninterface Props {\n    value: boolean;\n    onChange: (x: boolean) => void;\n}\n\nconst Checkbox: React.FC<Props> = (props) => {\n    return (\n        <input\n            type=\"checkbox\"\n            checked={props.value}\n            onChange={(e) => props.onChange(e.target.checked)}\n        />\n    );\n};\n\nexport default Checkbox;\n","import React from \"react\";\n\nimport \"./CurrencyOutput.scss\";\n\nexport interface Props {\n    value: number;\n}\n\nconst CurrencyOutput: React.FC<Props> = (props) => {\n    const CAD = new Intl.NumberFormat(\"en-CA\", {\n        style: \"currency\",\n        currency: \"CAD\",\n        maximumFractionDigits: 0,\n        minimumFractionDigits: 0,\n    });\n\n    return <output className=\"currency\">{CAD.format(props.value)}</output>;\n};\n\nexport default CurrencyOutput;\n","import React, { useEffect } from \"react\";\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\nimport { MortgageValuation } from \"./model/Mortgage\";\nimport Checkbox from \"./primitive/Checkbox\";\nimport CurrencyOutput from \"./primitive/CurrencyOutput\";\nimport Label from \"./primitive/Label\";\nimport NumberInput from \"./primitive/NumberInput\";\nimport PercentInput from \"./primitive/PercentInput\";\n\ninterface Props {\n    principal: number;\n    valuation: MortgageValuation;\n    monthly_payment: number;\n\n    downpayment: Dynamic<number>;\n    length: Dynamic<number>;\n    rate: Dynamic<number>;\n}\n\nconst Mortgage: React.FC<Props> = (props) => {\n    const use_principal = useDynamic(false);\n\n    useEffect(() => {\n        if (use_principal.current) {\n            props.downpayment.update(props.principal);\n        }\n    }, [props.principal, use_principal.current]);\n\n    return (\n        <fieldset>\n            <legend>Mortgage</legend>\n            <Label\n                name=\"Use principal\"\n                help=\"Will you be using all your principal or some of it? If you want a higher downpayment, then also increase your principal, as you can use that money from the downpayment for investments.\"\n            >\n                <Checkbox\n                    value={use_principal.current}\n                    onChange={use_principal.update}\n                />\n            </Label>\n            <Label\n                name=\"Downpayment\"\n                help=\"What will be the downpayment on this property? The maximum will be the 'Principal' set earlier.\"\n            >\n                <NumberInput\n                    min={0}\n                    step={10_000}\n                    max={props.principal}\n                    value={props.downpayment.current}\n                    onChange={props.downpayment.update}\n                    enabled={!use_principal.current}\n                />\n            </Label>\n            <Label name=\"Amount\" help=\"The size of the loan.\">\n                <CurrencyOutput value={props.valuation(0)} />\n            </Label>\n            <Label name=\"Length\" help=\"How many years is the mortgage?\">\n                <NumberInput\n                    min={1}\n                    step={1}\n                    value={props.length.current}\n                    onChange={props.length.update}\n                />\n            </Label>\n            <Label name=\"Interest rate (%)\">\n                <PercentInput\n                    step={0.1}\n                    value={props.rate.current}\n                    onChange={props.rate.update}\n                />\n            </Label>\n            <Label\n                name=\"Monthly payment\"\n                help=\"For a typical mortgage, the interest is compounded monthly and paid monthly until the length of the mortgage.\"\n            >\n                <CurrencyOutput value={props.monthly_payment} />\n            </Label>\n        </fieldset>\n    );\n};\n\nexport default Mortgage;\n","import React from \"react\";\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\nimport CurrencyOutput from \"./primitive/CurrencyOutput\";\nimport Label from \"./primitive/Label\";\nimport NumberInput from \"./primitive/NumberInput\";\n\ninterface Props {\n    final_value: number;\n    purchase_price: Dynamic<number>;\n    roi: Dynamic<number>;\n}\n\nconst Property: React.FC<Props> = (props) => {\n    const purchasePrice = props.purchase_price;\n    const roi = props.roi;\n    const final_value = props.final_value;\n\n    return (\n        <fieldset>\n            <legend>Property</legend>\n            <Label\n                name=\"Purchase Price\"\n                help=\"How much will the property cost to buy? This is typically the value of the property.\"\n            >\n                <NumberInput\n                    min={0}\n                    step={10_000}\n                    value={purchasePrice.current}\n                    onChange={purchasePrice.update}\n                />\n            </Label>\n            <Label\n                name=\"Rate of return\"\n                help=\"What is the expected simple rate of return on the property? How much will the house increase/decrease in value each year?\"\n            >\n                <NumberInput\n                    step={1}\n                    value={roi.current}\n                    onChange={roi.update}\n                />\n            </Label>\n            <Label\n                name=\"Final value\"\n                help=\"This is the final value of the property.\"\n            >\n                <CurrencyOutput value={final_value} />\n            </Label>\n        </fieldset>\n    );\n};\n\nexport default Property;\n","import React from \"react\";\nimport { Dynamic } from \"./model/Dynamic\";\nimport Label from \"./primitive/Label\";\nimport NumberInput from \"./primitive/NumberInput\";\nimport PercentInput from \"./primitive/PercentInput\";\n\ninterface Props {\n    tax_rate: Dynamic<number>;\n    maintenance: Dynamic<number>;\n    additional: Dynamic<number>;\n}\n\nconst PropertyExpenses: React.FC<Props> = (props) => {\n    return (\n        <fieldset>\n            <legend>Expenses</legend>\n            <p className=\"help\">\n                These are expenses that are specific to buying and not renting.\n                These are typically the hidden costs you might not think of when\n                living at a property.\n            </p>\n            <fieldset>\n                <legend>Property Taxes</legend>\n                <Label\n                    name=\"Rate (%)\"\n                    help=\"Most property taxes are a percent of the assessed value of the property. The assess value is essentially the amount the house would be sold for.\"\n                >\n                    <PercentInput\n                        value={props.tax_rate.current}\n                        onChange={props.tax_rate.update}\n                        step={0.05}\n                    />\n                </Label>\n            </fieldset>\n            <Label\n                name=\"Maintenance\"\n                help=\"How much would you spend per year on maintenance and upkeep of the property? This includes replacing appliances, gardening, plumbing, etc.\"\n            >\n                <NumberInput\n                    min={0}\n                    step={100}\n                    value={props.maintenance.current}\n                    onChange={props.maintenance.update}\n                />\n            </Label>\n            <Label\n                name=\"Additional Fees\"\n                help=\"How much would you spend in additional fees per year? This can include Strata fees if the property is a condo, or even Homeowner Association fees.\"\n            >\n                <NumberInput\n                    min={0}\n                    step={100}\n                    value={props.additional.current}\n                    onChange={props.additional.update}\n                />\n            </Label>\n        </fieldset>\n    );\n};\n\nexport default PropertyExpenses;\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { PropertyExpenses as PropertyExpensesData } from \"./model/Buy\";\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\nimport { Event } from \"./model/Event\";\nimport {\n    calculate_monthly_rate,\n    get_mortgage_values,\n    Mortgage as MortgageData,\n    MortgageValuation,\n} from \"./model/Mortgage\";\nimport {\n    create_valuation,\n    PropertyData,\n    PropertyValuation,\n} from \"./model/Property\";\nimport Mortgage from \"./Mortgage\";\nimport Property from \"./Property\";\nimport PropertyExpenses from \"./PropertyExpenses\";\n\ninterface Props {\n    years: number;\n    principal: number;\n    mortgage: {\n        downpayment: Dynamic<number>;\n        monthly_payment: Dynamic<number>;\n        value_at: Event<MortgageValuation>;\n    };\n    property_value: Event<PropertyValuation>;\n    expenses_for: Event<ExpensesFor>;\n}\n\ntype ExpensesFor = (year: number) => PropertyExpensesData;\n\nfunction useMortgageValuation(data: MortgageData): MortgageValuation {\n    const values = useMemo(() => {\n        return get_mortgage_values(data);\n    }, [data.interest_rate, data.length, data.value]);\n\n    return useCallback(\n        (year) => {\n            return values[year] ?? 0;\n        },\n        [values]\n    );\n}\n\nfunction useMortgage(house_price: number) {\n    const downpayment = useDynamic(50_000);\n    const length = useDynamic(25);\n    const rate = useDynamic(3);\n\n    const data: MortgageData = useMemo(() => {\n        return {\n            interest_rate: rate.current / 100,\n            length: length.current,\n            value: house_price - downpayment.current,\n        };\n    }, [rate.current, length.current, house_price, downpayment.current]);\n\n    const valuation = useMortgageValuation(data);\n    const monthly_payment = calculate_monthly_rate(data);\n\n    return {\n        downpayment,\n        length,\n        rate,\n        valuation,\n        monthly_payment,\n    };\n}\n\nfunction useProperty() {\n    const value = useDynamic(300_000);\n    const roi = useDynamic(5);\n\n    const data: PropertyData = useMemo(() => {\n        return {\n            initial_value: value.current,\n            roi: roi.current / 100,\n        };\n    }, [value.current, roi.current]);\n\n    const valuation = useCallback(create_valuation(data), [data]);\n\n    return {\n        value,\n        roi,\n        valuation,\n    };\n}\n\nfunction usePropertyExpenses() {\n    const tax_rate = useDynamic(3);\n    const maintenance = useDynamic(0);\n    const additional = useDynamic(0);\n\n    return {\n        tax_rate,\n        maintenance,\n        additional,\n    };\n}\n\ninterface ExpensesForData {\n    property_value: PropertyValuation;\n    property_tax_rate: number;\n    maintenance: number;\n    additional: number;\n}\n\nfunction useTotalExpenses(data: ExpensesForData): ExpensesFor {\n    return useCallback(\n        (year: number): PropertyExpensesData => {\n            return {\n                tax: data.property_value(year) * data.property_tax_rate,\n                maintenance: data.maintenance,\n                additional: data.additional,\n            };\n        },\n        [\n            data.property_tax_rate,\n            data.property_value,\n            data.additional,\n            data.maintenance,\n        ]\n    );\n}\n\nconst Buy: React.FC<Props> = (props) => {\n    const property = useProperty();\n    const mortgage = useMortgage(property.value.current);\n    const expenses = usePropertyExpenses();\n    const total_expenses_for = useTotalExpenses({\n        property_value: property.valuation,\n        property_tax_rate: expenses.tax_rate.current / 100,\n        additional: expenses.additional.current,\n        maintenance: expenses.maintenance.current,\n    });\n\n    useEffect(() => {\n        props.mortgage.value_at(mortgage.valuation);\n        props.mortgage.monthly_payment.update(mortgage.monthly_payment);\n        props.mortgage.downpayment.update(mortgage.downpayment.current);\n        props.expenses_for(total_expenses_for);\n        props.property_value(property.valuation);\n    }, [\n        mortgage.valuation,\n        mortgage.monthly_payment,\n        mortgage.downpayment.current,\n        total_expenses_for,\n        property.valuation,\n    ]);\n\n    return (\n        <section className=\"buy\">\n            <h3>Buying</h3>\n            <Property\n                purchase_price={property.value}\n                roi={property.roi}\n                final_value={property.valuation(props.years)}\n            />\n            <Mortgage\n                principal={props.principal}\n                rate={mortgage.rate}\n                length={mortgage.length}\n                valuation={mortgage.valuation}\n                downpayment={mortgage.downpayment}\n                monthly_payment={mortgage.monthly_payment}\n            />\n            <PropertyExpenses\n                tax_rate={expenses.tax_rate}\n                maintenance={expenses.maintenance}\n                additional={expenses.additional}\n            />\n        </section>\n    );\n};\n\nexport default Buy;\n","export type PropertyValuation = (year: number) => number;\n\nexport interface PropertyData {\n    initial_value: number;\n    roi: number;\n}\n\nexport function create_valuation(data: PropertyData): PropertyValuation {\n    return (year: number) => {\n        return data.initial_value * (1 + data.roi * year);\n    };\n}\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\nimport {\n    create_valuation,\n    RentValuation,\n    RentValuationData,\n} from \"./model/RentPlace\";\nimport Checkbox from \"./primitive/Checkbox\";\nimport CurrencyOutput from \"./primitive/CurrencyOutput\";\nimport Label from \"./primitive/Label\";\nimport NumberInput from \"./primitive/NumberInput\";\n\nimport \"./RentPlace.scss\";\n\ninterface Props {\n    true_rent: Dynamic<RentValuation>;\n    monthly: {\n        utilities: number;\n        internet: number;\n    };\n    max_years: number;\n    years: Length;\n}\n\nexport interface Length {\n    value: Dynamic<number>;\n    enabled: boolean;\n}\n\ninterface MonthlyData {\n    utilities: number;\n    internet: number;\n}\n\nconst useRentPlace = (monthly: MonthlyData) => {\n    const rent = useDynamic(0);\n    const include_utilities = useDynamic(false);\n    const include_internet = useDynamic(false);\n    const rent_change = useDynamic(0);\n\n    const data: RentValuationData = useMemo(() => {\n        return {\n            rent: rent.current,\n            rent_change: rent_change.current,\n            includes: {\n                utilities: include_utilities.current,\n                internet: include_internet.current,\n            },\n            monthly: monthly,\n        };\n    }, [\n        rent.current,\n        rent_change.current,\n        include_utilities.current,\n        include_internet.current,\n        monthly.internet,\n        monthly.utilities,\n    ]);\n\n    const valuation = useMemo(() => create_valuation(data), [data]);\n\n    return {\n        rent,\n        include_utilities,\n        include_internet,\n        rent_change,\n        valuation,\n    };\n};\n\nconst RentPlace: React.FC<Props> = (props) => {\n    const {\n        rent,\n        include_utilities,\n        include_internet,\n        rent_change,\n        valuation,\n    } = useRentPlace(props.monthly);\n\n    useEffect(() => {\n        props.true_rent.update(valuation);\n    }, [valuation]);\n\n    return (\n        <fieldset className=\"place\">\n            <Label\n                name=\"Monthly rent\"\n                help=\"How much do you spend per month on rent?\"\n            >\n                <NumberInput\n                    min={0}\n                    step={100}\n                    value={rent.current}\n                    onChange={rent.update}\n                />\n            </Label>\n            <Label\n                name=\"Includes utilities\"\n                help=\"Does the rent include utilities?\"\n            >\n                <Checkbox\n                    value={include_utilities.current}\n                    onChange={include_utilities.update}\n                />\n            </Label>\n            <Label\n                name=\"Includes internet\"\n                help=\"Does the rent include internet?\"\n            >\n                <Checkbox\n                    value={include_internet.current}\n                    onChange={include_internet.update}\n                />\n            </Label>\n            <Label\n                name=\"Years renting\"\n                help=\"How many years do you expect staying here?\"\n            >\n                <NumberInput\n                    min={1}\n                    max={props.max_years}\n                    step={1}\n                    value={props.years.value.current}\n                    onChange={props.years.value.update}\n                    enabled={props.years.enabled}\n                />\n            </Label>\n            <Label\n                name=\"Rent change ($)\"\n                help=\"How much will rent increase/decrease per year?\"\n            >\n                <NumberInput\n                    step={50}\n                    value={rent_change.current}\n                    onChange={rent_change.update}\n                />\n            </Label>\n            <Label\n                name=\"True monthly rent\"\n                help=\"This is your rent plus additional costs if they're not included.\"\n            >\n                <CurrencyOutput value={valuation(1)} />\n            </Label>\n        </fieldset>\n    );\n};\n\nexport default RentPlace;\n","export type RentValuation = (year: number) => number;\n\nexport interface RentPlace {\n    value_at: RentValuation;\n    years: number;\n}\n\nexport interface RentValuationData {\n    rent: number;\n    rent_change: number;\n    includes: {\n        utilities: boolean;\n        internet: boolean;\n    };\n    monthly: MonthlyData;\n}\n\ninterface MonthlyData {\n    utilities: number;\n    internet: number;\n}\n\nexport function create_valuation(data: RentValuationData): RentValuation {\n    return (year) => {\n        return (\n            data.rent +\n            data.rent_change * (year - 1) +\n            (data.includes.utilities ? 0 : data.monthly.utilities) +\n            (data.includes.internet ? 0 : data.monthly.internet)\n        );\n    };\n}\n","/* eslint-disable no-extend-native */\n\ndeclare global {\n    interface Array<T> {\n        sum(this: number[]): number;\n        zip<K>(other: K[]): [T, K][];\n        zip_with<K, Z>(other: K[], fn: (tuple: [T, K]) => Z): Z[];\n        replace_at(index: number, value: T): T[];\n    }\n}\n\nexport function sum(this: number[]): number {\n    return this.reduce((acc, x) => acc + x, 0);\n}\n\nArray.prototype.sum = sum;\n\nexport function zip<T, K>(this: T[], other: K[]): [T, K][] {\n    const min_length = Math.min(this.length, other.length);\n\n    return this.filter((_, i) => i < min_length).map((value, i) => [\n        value,\n        other[i],\n    ]);\n}\n\nArray.prototype.zip = zip;\n\nexport function zip_with<T, K, Z>(\n    this: T[],\n    other: K[],\n    fn: (tuple: [T, K]) => Z\n): Z[] {\n    return this.zip(other).map(fn);\n}\n\nArray.prototype.zip_with = zip_with;\n\nexport function replace_at<T>(this: T[], index: number, value: T): T[] {\n    return this.map((x, i) => (i === index ? value : x));\n}\n\nArray.prototype.replace_at = replace_at;\n","import { RentPlace, RentValuation } from \"./RentPlace\";\n\nexport interface RentPlaces {\n    initial: RentPlace[];\n    last: RentValuation;\n}\n\nexport function calculate_max_year_for(\n    total_years: number,\n    places: RentPlaces,\n    index: number\n): number {\n    const places_years = places.initial.map((p) => p.years);\n\n    const place_years = places_years[index];\n\n    const last_place_years = calculate_last_year(total_years, places);\n\n    // last rent place must be >= 1\n    return place_years + (last_place_years - 1);\n}\n\nexport function calculate_total_rent_for(\n    places: RentPlaces,\n    year: number\n): number {\n    for (const place of places.initial) {\n        if (year <= place.years) {\n            return place.value_at(year) * 12;\n        }\n\n        year -= place.years;\n    }\n\n    return places.last(year) * 12;\n}\n\nexport function calculate_last_year(\n    total_years: number,\n    places: RentPlaces\n): number {\n    return total_years - places.initial.map((p) => p.years).sum();\n}\n\nexport function update_last(\n    places: RentPlaces,\n    new_valuation: RentValuation\n): RentPlaces {\n    return {\n        ...places,\n        last: new_valuation,\n    };\n}\n\nexport function can_add(total_years: number, places: RentPlaces): boolean {\n    return calculate_last_year(total_years, places) > 1;\n}\n\nexport function add(places: RentPlaces): RentPlaces {\n    const last: RentPlace = {\n        value_at: places.last,\n        years: 1,\n    };\n\n    return {\n        initial: [...places.initial, last],\n        last: (_) => 0,\n    };\n}\n\nexport function update_at(\n    places: RentPlaces,\n    index: number,\n    place: Partial<RentPlace>\n): RentPlaces {\n    const current_place = places.initial[index];\n\n    const new_place = {\n        ...current_place,\n        ...place,\n    };\n\n    return {\n        ...places,\n        initial: [\n            ...places.initial.slice(0, index),\n            new_place,\n            ...places.initial.slice(index + 1),\n        ],\n    };\n}\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\nimport { RentPlace as RentPlaceData, RentValuation } from \"./model/RentPlace\";\nimport RentPlace, { Length } from \"./RentPlace\";\nimport \"./model/Array\";\nimport { Event } from \"./model/Event\";\n\nimport * as R from \"ramda\";\nimport {\n    add,\n    calculate_last_year,\n    calculate_max_year_for,\n    calculate_total_rent_for,\n    can_add,\n    RentPlaces as RentPlacesData,\n    update_at,\n    update_last,\n} from \"./model/RentPlaces\";\n\nimport \"./RentPlaces.scss\";\n\ninterface Props {\n    years: number;\n    monthly: {\n        utilities: number;\n        internet: number;\n    };\n    valuation: Event<RentValuation>;\n}\n\nfunction useRentPlaces(total_years: number) {\n    const places = useDynamic<RentPlacesData>({\n        initial: [],\n        last: (_) => 0,\n    });\n\n    const valuation = useCallback(\n        R.partial(calculate_total_rent_for, [places.current]),\n        [places.current]\n    );\n\n    return {\n        places: places.current,\n        add_enabled: can_add(total_years, places.current),\n        add: () => {\n            places.update(add(places.current));\n        },\n        update_initial: (index: number, new_place: Partial<RentPlaceData>) => {\n            places.update(update_at(places.current, index, new_place));\n        },\n        update_last: (valuation: RentValuation) => {\n            places.update(update_last(places.current, valuation));\n        },\n        valuation,\n    };\n}\n\ninterface LastRentPlaceProps {\n    valuation: RentValuation;\n    update_last: (valuation: RentValuation) => void;\n    years: number;\n    monthly: {\n        utilities: number;\n        internet: number;\n    };\n}\n\nconst LastRentPlace: React.FC<LastRentPlaceProps> = (props) => {\n    const true_rent = {\n        current: props.valuation,\n        update: props.update_last,\n    };\n\n    const length: Length = {\n        enabled: false,\n        value: {\n            current: props.years,\n            update: (_) => {\n                throw new Error(\"Can't update last place's years.\");\n            },\n        },\n    };\n\n    return (\n        <RentPlace\n            max_years={length.value.current}\n            true_rent={true_rent}\n            monthly={props.monthly}\n            years={length}\n        />\n    );\n};\n\nconst RentPlaces: React.FC<Props> = (props) => {\n    const {\n        places,\n        add,\n        update_initial,\n        update_last,\n        add_enabled,\n        valuation: total_valuation,\n    } = useRentPlaces(props.years);\n\n    useEffect(() => {\n        props.valuation(total_valuation);\n    }, [total_valuation]);\n\n    return (\n        <section className=\"places\">\n            <ol>\n                {places.initial.map((place, index) => {\n                    const true_rent: Dynamic<RentValuation> = {\n                        current: place.value_at,\n                        update: (new_valuation) => {\n                            update_initial(index, { value_at: new_valuation });\n                        },\n                    };\n\n                    const years: Length = {\n                        value: {\n                            current: place.years,\n                            update: (new_year) => {\n                                update_initial(index, { years: new_year });\n                            },\n                        },\n                        enabled: true,\n                    };\n\n                    const max_years = calculate_max_year_for(\n                        props.years,\n                        places,\n                        index\n                    );\n\n                    return (\n                        <li key={index}>\n                            <RentPlace\n                                max_years={max_years}\n                                true_rent={true_rent}\n                                monthly={props.monthly}\n                                years={years}\n                            />\n                        </li>\n                    );\n                })}\n                <li>\n                    <LastRentPlace\n                        monthly={props.monthly}\n                        update_last={update_last}\n                        valuation={places.last}\n                        years={calculate_last_year(props.years, places)}\n                    />\n                </li>\n            </ol>\n            <button onClick={add} disabled={!add_enabled}>\n                Add place to rent\n            </button>\n        </section>\n    );\n};\n\nexport default RentPlaces;\n","import React, { useEffect } from \"react\";\nimport { useDynamic } from \"./model/Dynamic\";\nimport { Event } from \"./model/Event\";\nimport { RentValuation } from \"./model/RentPlace\";\nimport RentPlacesData from \"./RentPlaces\";\n\ninterface Props {\n    years: number;\n    monthly: {\n        utilities: number;\n        internet: number;\n    };\n    onRentChange: Event<RentValuation>;\n}\n\nfunction useRent() {\n    const valuation = useDynamic<RentValuation>((_) => 0);\n\n    return {\n        valuation,\n    };\n}\n\nconst Rent: React.FC<Props> = (props) => {\n    const { valuation } = useRent();\n\n    useEffect(() => {\n        props.onRentChange(valuation.current);\n    }, [valuation.current]);\n\n    return (\n        <section className=\"rent\">\n            <h3>Renting</h3>\n            <RentPlacesData\n                years={props.years}\n                monthly={props.monthly}\n                valuation={valuation.update}\n            />\n        </section>\n    );\n};\n\nexport default Rent;\n","import React from \"react\";\nimport CurrencyOutput from \"./primitive/CurrencyOutput\";\n\ninterface Props {\n    rent: number;\n    buy: number;\n}\n\nconst Summary: React.FC<Props> = (props) => {\n    return (\n        <header>\n            <h2>Summary</h2>\n            <section className=\"rent\">\n                <h3>Renting</h3>\n                <strong>Asset Value</strong>\n                <CurrencyOutput value={props.rent} />\n            </section>\n            <section className=\"buy\">\n                <h3>Buying</h3>\n                <CurrencyOutput value={props.buy} />\n                <strong>Asset Value</strong>\n            </section>\n        </header>\n    );\n};\n\nexport default Summary;\n","import React from \"react\";\nimport CurrencyOutput, {\n    Props as CurrencyOutputProps,\n} from \"./primitive/CurrencyOutput\";\nimport { AccountTree } from \"./model/Account\";\nimport \"./TOutline.scss\";\n\nexport interface Props {\n    left: AccountTree;\n    right: AccountTree;\n}\n\nconst BlockCurrencyOutput: React.FC<CurrencyOutputProps> = (props) => {\n    return (\n        <div>\n            <CurrencyOutput {...props} />\n        </div>\n    );\n};\n\nconst Account: React.FC<AccountTree> = (props) => {\n    const details = props.children || [];\n    return (\n        <section className=\"account\">\n            <strong>{props.name}</strong>\n            <BlockCurrencyOutput value={props.value} />\n            {details.map((detail) => (\n                <Account key={detail.name} {...detail} />\n            ))}\n        </section>\n    );\n};\n\nconst TOutline: React.FC<Props> = (props) => {\n    const details = {\n        left: props.left.children || [],\n        right: props.right.children || [],\n    };\n\n    return (\n        <section className=\"taccount\">\n            <header>\n                <h5>{props.left.name}</h5>\n                <h5>{props.right.name}</h5>\n            </header>\n            <section className=\"left\">\n                {details.left.map((detail) => {\n                    return <Account key={detail.name} {...detail} />;\n                })}\n            </section>\n            <section className=\"right\">\n                {details.right.map((detail) => {\n                    return <Account key={detail.name} {...detail} />;\n                })}\n            </section>\n            <footer>\n                <BlockCurrencyOutput value={props.left.value} />\n                <BlockCurrencyOutput value={props.right.value} />\n            </footer>\n        </section>\n    );\n};\n\nexport default TOutline;\n","import React from \"react\";\nimport TOutline, { Props as TAccountProps } from \"./TOutline\";\nimport { ValueProp as BreakdownProps } from \"./Breakdown\";\n\nimport \"./DualBreakdown.scss\";\nimport { useDynamic } from \"./model/Dynamic\";\nimport {\n    Capital,\n    CapitalAccounts,\n    OptionBreakdownAccounts,\n    Profit,\n} from \"./model/Option\";\nimport { AccountTree, from_accounts } from \"./model/Account\";\n\ntype Props = Dual<OptionBreakdownAccounts> & {\n    years: number;\n};\n\ninterface Dual<T> {\n    rent: T;\n    buy: T;\n}\n\ninterface YearSelectProps {\n    years: number;\n    value: number;\n    onChange: (year: number) => void;\n}\n\nconst YearSelect: React.FC<YearSelectProps> = (props) => {\n    const year_options: JSX.Element[] = [];\n\n    for (let year = 1; year <= props.years; year++) {\n        year_options.push(\n            <option selected={year === props.value} value={year}>\n                Year {year}\n            </option>\n        );\n    }\n\n    return (\n        <input\n            type=\"range\"\n            min={1}\n            max={props.years}\n            step={1}\n            value={props.value}\n            onChange={(e) => props.onChange(+e.target.value)}\n        />\n    );\n};\n\nconst BalanceOutline: React.FC<Capital<AccountTree, AccountTree>> = (props) => {\n    return <TOutline left={props.assets} right={props.liabilities} />;\n};\n\nconst IncomeOutline: React.FC<Profit<AccountTree, AccountTree>> = (props) => {\n    return <TOutline left={props.income} right={props.expenses} />;\n};\n\nconst DualBreakdown: React.FC<Props> = (props) => {\n    const year_select = useDynamic(1);\n\n    const year_breakdown = {\n        rent: props.rent.years[year_select.current - 1],\n        buy: props.buy.years[year_select.current - 1],\n    };\n\n    return (\n        <section id=\"breakdown\">\n            <h3>Breakdown</h3>\n            <section className=\"initial\">\n                <h4>Initial</h4>\n                <BalanceOutline {...props.rent.initial} />\n                <BalanceOutline {...props.buy.initial} />\n            </section>\n            <h4>Year {year_select.current}</h4>\n            <YearSelect\n                value={year_select.current}\n                onChange={year_select.update}\n                years={props.years}\n            />\n            <section className=\"year\">\n                <section className=\"rent\">\n                    <IncomeOutline {...year_breakdown.rent.profit} />\n                    <BalanceOutline {...year_breakdown.rent.capital} />\n                </section>\n                <section className=\"buy\">\n                    <IncomeOutline {...year_breakdown.buy.profit} />\n                    <BalanceOutline {...year_breakdown.buy.capital} />\n                </section>\n            </section>\n        </section>\n    );\n};\n\nexport default DualBreakdown;\n","interface LeafAccount {\n    name: string;\n    value: number;\n}\n\nexport type AccountTree = LeafAccount & { children: AccountTree[] };\n\nexport function leaf_account(name: string, value: number): AccountTree {\n    return {\n        name,\n        value,\n        children: [],\n    };\n}\n\nfunction tree_sum(tree: AccountTree): number {\n    if (tree.value !== undefined) {\n        return tree.value;\n    }\n\n    return tree.children.map((c) => tree_sum(c)).sum();\n}\n\nexport function from_accounts(\n    name: string,\n    children: AccountTree[],\n    value?: number\n): AccountTree {\n    return {\n        name,\n        value: value ?? children.map(tree_sum).sum(),\n        children: children,\n    };\n}\n\nexport function to_account(name: string, value: number): LeafAccount {\n    return {\n        name,\n        value,\n    };\n}\n","import { AccountTree, from_accounts } from \"./Account\";\nimport { PropertyExpenses } from \"./Buy\";\n\nexport interface BothIncome {\n    investments: number;\n    salary: number;\n}\n\nexport interface Capital<A, L> {\n    assets: A;\n    liabilities: L;\n}\n\nexport interface Profit<I, E> {\n    income: I;\n    expenses: E;\n}\n\nexport interface OptionBreakdownYear<C, P> {\n    capital: C;\n    profit: P;\n}\n\nexport interface OptionBreakdown<C, P> {\n    initial: C;\n    years: OptionBreakdownYear<C, P>[];\n    final: C;\n}\n\nexport function evaluate_option<C, P>(\n    initial: C,\n    eval_year: (prev_capital: C, year: number) => OptionBreakdownYear<C, P>,\n    num_years: number\n): OptionBreakdown<C, P> {\n    let year_breakdowns: OptionBreakdownYear<C, P>[] = [];\n    let prev_capital = initial;\n\n    for (let year = 1; year <= num_years; year++) {\n        const breakdown = eval_year(prev_capital, year);\n\n        prev_capital = breakdown.capital;\n\n        year_breakdowns.push(breakdown);\n    }\n\n    const final = year_breakdowns[year_breakdowns.length - 1].capital;\n\n    return {\n        initial: initial,\n        years: year_breakdowns,\n        final: final,\n    };\n}\n\nexport type CapitalAccounts = Capital<AccountTree[], AccountTree[]>;\nexport type ProfitAccounts = Profit<AccountTree[], AccountTree[]>;\n\nexport type CapitalAccount = Capital<AccountTree, AccountTree>;\nexport type ProfitAccount = Profit<AccountTree, AccountTree>;\n\nexport type OptionBreakdownAccounts = OptionBreakdown<\n    CapitalAccount,\n    ProfitAccount\n>;\n\nfunction get_capital_account(data: CapitalAccounts): CapitalAccount {\n    return {\n        assets: from_accounts(\"Assets\", data.assets),\n        liabilities: from_accounts(\"Liabilities\", data.liabilities),\n    };\n}\n\nfunction get_profit_account(data: ProfitAccounts): ProfitAccount {\n    return {\n        income: from_accounts(\"Income\", data.income),\n        expenses: from_accounts(\"Expenses\", data.expenses),\n    };\n}\n\nexport function get_breakdown(\n    data: OptionBreakdown<CapitalAccounts, ProfitAccounts>\n): OptionBreakdownAccounts {\n    const initial = get_capital_account(data.initial);\n\n    const years = data.years.map((year) => {\n        return {\n            capital: get_capital_account(year.capital),\n            profit: get_profit_account(year.profit),\n        };\n    });\n\n    const final = get_capital_account(data.final);\n\n    return {\n        initial,\n        years,\n        final,\n    };\n}\n","export type Tree<L> =\n    | L\n    | {\n          value: L;\n          children: Tree<L>[];\n      };\n\nexport type NumberTree<T> = number | { [x in keyof T]: NumberTree<T[x]> };\n\nexport function total<T>(tree: NumberTree<T>): number {\n    if (typeof tree === \"number\") {\n        return tree;\n    }\n\n    let sum = 0;\n    for (const x in tree) {\n        sum += total(tree[x]);\n    }\n\n    return sum;\n}\n","import { add } from \"ramda\";\nimport { AccountTree, from_accounts, leaf_account } from \"./Account\";\nimport {\n    BothIncome,\n    Capital,\n    CapitalAccounts,\n    evaluate_option,\n    get_breakdown,\n    OptionBreakdown,\n    OptionBreakdownAccounts,\n    OptionBreakdownYear,\n    Profit,\n    ProfitAccounts,\n} from \"./Option\";\nimport { PropertyValuation } from \"./Property\";\nimport { NumberTree, total } from \"./Tree\";\n\nexport interface BuyData {\n    years: number;\n    assets: {\n        property: PropertyValuation;\n        principal: number;\n    };\n    income: {\n        salary: number;\n        roi: number;\n    };\n    expenses: {\n        monthly: MonthlyExpenses;\n        mortgage: Mortgage;\n        property: (year: number) => PropertyExpenses;\n    };\n}\n\ninterface MonthlyExpenses {\n    utilities: number;\n    internet: number;\n    other: number;\n}\n\ninterface Mortgage {\n    downpayment: number;\n    value_at: (year: number) => number;\n    payments_for: (year: number) => number;\n}\n\ninterface BuyAssets {\n    investments: number;\n    property: number;\n}\n\ninterface BuyLiabilities {\n    mortgage: number;\n}\n\ninterface BuyExpenses {\n    monthly: {\n        utilities: number;\n        internet: number;\n        other: number;\n    };\n    mortgage: number;\n    property: PropertyExpenses;\n}\n\nexport interface PropertyExpenses {\n    tax: number;\n    maintenance: number;\n    additional: number;\n}\n\ntype BuyCapital = Capital<BuyAssets, BuyLiabilities>;\ntype BuyProfit = Profit<BothIncome, BuyExpenses>;\n\ntype BuyBreakdown = OptionBreakdown<BuyCapital, BuyProfit>;\ntype BuyBreakdownYear = OptionBreakdownYear<BuyCapital, BuyProfit>;\n\nexport function calculate_buy_breakdown(data: BuyData): BuyBreakdown {\n    const initial: Capital<BuyAssets, BuyLiabilities> = {\n        assets: {\n            investments:\n                data.assets.principal - data.expenses.mortgage.downpayment,\n            property: data.assets.property(0),\n        },\n        liabilities: {\n            mortgage: data.expenses.mortgage.value_at(0),\n        },\n    };\n\n    const fn = (prev_capital: BuyCapital, year: number): BuyBreakdownYear => {\n        const income: BothIncome = {\n            investments:\n                prev_capital.assets.investments * (data.income.roi / 100),\n            salary: data.income.salary,\n        };\n        const expenses: BuyExpenses = {\n            monthly: data.expenses.monthly,\n            mortgage: data.expenses.mortgage.payments_for(year),\n            property: data.expenses.property(year),\n        };\n\n        const total_income = total(income);\n        const total_expenses = total(expenses);\n\n        const profit = total_income - total_expenses;\n\n        const assets: BuyAssets = {\n            investments: prev_capital.assets.investments + profit,\n            property: data.assets.property(year),\n        };\n        const liabilities: BuyLiabilities = {\n            mortgage: data.expenses.mortgage.value_at(year),\n        };\n\n        return {\n            capital: {\n                assets,\n                liabilities,\n            },\n            profit: {\n                income,\n                expenses,\n            },\n        };\n    };\n\n    return evaluate_option(initial, fn, data.years);\n}\n\nfunction get_capital_accounts(data: BuyCapital): CapitalAccounts {\n    const investments = leaf_account(\"Investments\", data.assets.investments);\n    const property = leaf_account(\"Property\", data.assets.property);\n    const assets = [investments, property];\n\n    const mortgage = leaf_account(\"Mortgage\", data.liabilities.mortgage);\n    const liabilities = [mortgage];\n\n    return {\n        assets,\n        liabilities,\n    };\n}\n\nfunction get_property_accounts(data: PropertyExpenses): AccountTree {\n    const tax = leaf_account(\"Tax\", data.tax);\n    const maintenance = leaf_account(\"Maintenance\", data.maintenance);\n    const additional = leaf_account(\"Additional\", data.additional);\n\n    return from_accounts(\"Property\", [tax, maintenance, additional]);\n}\n\nfunction get_monthly_accounts(data: MonthlyExpenses): AccountTree {\n    const utilities = leaf_account(\"Utilities\", data.utilities);\n    const internet = leaf_account(\"Internet\", data.internet);\n    const other = leaf_account(\"Other\", data.other);\n\n    return from_accounts(\"Monthly\", [utilities, internet, other]);\n}\n\nfunction get_profit_accounts(data: BuyProfit): ProfitAccounts {\n    const property = get_property_accounts(data.expenses.property);\n    const mortgage = leaf_account(\"Mortgage\", data.expenses.mortgage);\n    const monthly = get_monthly_accounts(data.expenses.monthly);\n\n    const expenses = [property, mortgage, monthly];\n\n    const investments = leaf_account(\"Investments\", data.income.investments);\n    const salary = leaf_account(\"Salary\", data.income.salary);\n\n    const income = [investments, salary];\n\n    return {\n        expenses,\n        income,\n    };\n}\n\nexport function get_buy_breakdown(data: BuyBreakdown): OptionBreakdownAccounts {\n    const initial = get_capital_accounts(data.initial);\n    const years = data.years.map(\n        (year): OptionBreakdownYear<CapitalAccounts, ProfitAccounts> => {\n            return {\n                capital: get_capital_accounts(year.capital),\n                profit: get_profit_accounts(year.profit),\n            };\n        }\n    );\n    const final = get_capital_accounts(data.final);\n\n    return get_breakdown({\n        initial,\n        years,\n        final,\n    });\n}\n","import { leaf_account } from \"./Account\";\nimport {\n    BothIncome,\n    Capital,\n    CapitalAccounts,\n    evaluate_option,\n    get_breakdown,\n    OptionBreakdown,\n    OptionBreakdownAccounts,\n    OptionBreakdownYear,\n    Profit,\n    ProfitAccounts,\n} from \"./Option\";\nimport { RentValuation } from \"./RentPlace\";\n\nexport interface RentData {\n    years: number;\n    principal: number;\n    income: {\n        salary: number;\n        roi: number;\n    };\n    expenses: {\n        rent: RentValuation;\n        other: number;\n    };\n}\n\ninterface RentAssets {\n    investments: number;\n}\n\ninterface RentLiabilities {}\n\ninterface RentExpenses {\n    rent: number;\n    other: number;\n}\n\ntype RentCapital = Capital<RentAssets, RentLiabilities>;\ntype RentProfit = Profit<BothIncome, RentExpenses>;\n\ntype RentBreakdown = OptionBreakdown<RentCapital, RentProfit>;\ntype RentBreakdownYear = OptionBreakdownYear<RentCapital, RentProfit>;\n\nexport function calculate_rent_breakdown(data: RentData): RentBreakdown {\n    const initial = {\n        assets: {\n            investments: data.principal,\n        },\n        liabilities: {},\n    };\n\n    const fn = (prev_capital: RentCapital, year: number): RentBreakdownYear => {\n        const income = {\n            investments:\n                prev_capital.assets.investments * (data.income.roi / 100),\n            salary: data.income.salary,\n        };\n\n        const expenses = {\n            rent: data.expenses.rent(year),\n            other: data.expenses.other * 12,\n        };\n\n        const total_income = income.investments + income.salary;\n        const total_expenses = expenses.rent + expenses.other;\n\n        const profit = total_income - total_expenses;\n\n        return {\n            capital: {\n                assets: {\n                    investments: prev_capital.assets.investments + profit,\n                },\n                liabilities: {},\n            },\n            profit: {\n                income,\n                expenses,\n            },\n        };\n    };\n\n    return evaluate_option(initial, fn, data.years);\n}\n\nfunction get_capital_accounts(data: RentCapital): CapitalAccounts {\n    const investments = leaf_account(\"Investments\", data.assets.investments);\n    const assets = [investments];\n\n    return {\n        assets,\n        liabilities: [],\n    };\n}\n\nfunction get_profit_accounts(data: RentProfit): ProfitAccounts {\n    const rent = leaf_account(\"Rent\", data.expenses.rent);\n    const other = leaf_account(\"Other\", data.expenses.other);\n\n    const expenses = [rent, other];\n\n    const investments = leaf_account(\"Investments\", data.income.investments);\n    const salary = leaf_account(\"Salary\", data.income.salary);\n\n    const income = [investments, salary];\n\n    return {\n        expenses,\n        income,\n    };\n}\n\nexport function get_rent_breakdown(data: RentBreakdown) {\n    const initial = get_capital_accounts(data.initial);\n    const years = data.years.map(\n        (year): OptionBreakdownYear<CapitalAccounts, ProfitAccounts> => {\n            return {\n                capital: get_capital_accounts(year.capital),\n                profit: get_profit_accounts(year.profit),\n            };\n        }\n    );\n    const final = get_capital_accounts(data.final);\n\n    return get_breakdown({\n        initial,\n        years,\n        final,\n    });\n}\n","import React, { useMemo } from \"react\";\nimport \"./App.scss\";\nimport Both from \"./Both\";\nimport { ValueProp as BreakdownValueProps } from \"./Breakdown\";\nimport Buy from \"./Buy\";\nimport { useDynamic } from \"./model/Dynamic\";\nimport Rent from \"./Rent\";\nimport Summary from \"./Summary\";\nimport DualBreakdown from \"./DualBreakdown\";\nimport {\n    BuyData,\n    calculate_buy_breakdown,\n    get_buy_breakdown,\n    PropertyExpenses,\n} from \"./model/Buy\";\nimport { get_breakdown } from \"./model/Option\";\nimport {\n    calculate_rent_breakdown,\n    get_rent_breakdown,\n    RentData,\n} from \"./model/Rent\";\nimport { NumberTree } from \"./model/Tree\";\n\ninterface BuyHookData {\n    years: number;\n    principal: number;\n    monthly_expenses: {\n        utilities: number;\n        internet: number;\n        other: number;\n    };\n    income: {\n        salary: number;\n        roi: number;\n    };\n}\n\nfunction useBuy(data: BuyHookData) {\n    const downpayment = useDynamic(50_000);\n    const monthly_payment = useDynamic(0);\n\n    const mortgage_value = useDynamic((year: number): number => 0);\n    const mortgage = {\n        downpayment: downpayment.current,\n        value_at: mortgage_value.current,\n        monthly_payment: monthly_payment.current,\n    };\n\n    const house_value = useDynamic((year: number): number => 0);\n\n    const expenses_for = useDynamic(\n        (year: number): PropertyExpenses => {\n            return {\n                tax: 0,\n                additional: 0,\n                maintenance: 0,\n            };\n        }\n    );\n\n    const buy_data: BuyData = useMemo(() => {\n        const monthly = {\n            utilities: data.monthly_expenses.utilities * 12,\n            internet: data.monthly_expenses.internet * 12,\n            other: data.monthly_expenses.other * 12,\n        };\n\n        return {\n            years: data.years,\n            assets: {\n                principal: data.principal,\n                property: house_value.current,\n            },\n            income: data.income,\n            expenses: {\n                monthly: monthly,\n                mortgage: {\n                    downpayment: mortgage.downpayment,\n                    value_at: mortgage.value_at,\n                    payments_for: (year) =>\n                        mortgage.value_at(year - 1) > 0\n                            ? mortgage.monthly_payment * 12\n                            : 0,\n                },\n                property: expenses_for.current,\n            },\n        };\n    }, [\n        data.years,\n        data.principal,\n        house_value.current,\n        data.income,\n        data.monthly_expenses.utilities,\n        data.monthly_expenses.internet,\n        data.monthly_expenses.other,\n        mortgage.value_at,\n        mortgage.downpayment,\n        mortgage.monthly_payment,\n        expenses_for.current,\n    ]);\n\n    const buy_breakdown = useMemo(() => {\n        return calculate_buy_breakdown(buy_data);\n    }, [buy_data]);\n\n    const profit = useMemo(() => {\n        const total_assets =\n            buy_breakdown.final.assets.investments +\n            buy_breakdown.final.assets.property;\n\n        const total_liabilities = buy_breakdown.final.liabilities.mortgage;\n\n        return total_assets - total_liabilities;\n    }, [buy_breakdown]);\n\n    const states = useMemo(() => {\n        return get_buy_breakdown(buy_breakdown);\n    }, [buy_breakdown]);\n\n    return {\n        mortgage: {\n            downpayment,\n            value_at: mortgage_value.update,\n            monthly_payment,\n        },\n        property_value: house_value,\n        expenses_for,\n        profit,\n        states,\n    };\n}\n\nfunction useIncome() {\n    const roi = useDynamic(0);\n    const salary = useDynamic(60_000);\n\n    const current = {\n        roi: roi.current,\n        salary: salary.current,\n    };\n\n    return {\n        roi,\n        salary,\n        current,\n    };\n}\n\nfunction useMonthlyExpenses() {\n    const monthly = {\n        utilities: useDynamic(0),\n        internet: useDynamic(0),\n        other: useDynamic(0),\n    };\n\n    const current = {\n        utilities: monthly.utilities.current,\n        internet: monthly.internet.current,\n        other: monthly.other.current,\n    };\n\n    return {\n        ...monthly,\n        current,\n    };\n}\n\ninterface RentHookData {\n    years: number;\n    principal: number;\n    income: {\n        salary: number;\n        roi: number;\n    };\n    monthly_expenses: {\n        internet: number;\n        utilities: number;\n        other: number;\n    };\n}\n\nfunction useRent(data: RentHookData) {\n    const rents = useDynamic((year: number): number => 0);\n\n    const monthly_data = useMemo(() => {\n        return {\n            internet: data.monthly_expenses.internet,\n            utilities: data.monthly_expenses.utilities,\n        };\n    }, [data.monthly_expenses.utilities, data.monthly_expenses.internet]);\n\n    const rent_data: RentData = useMemo(() => {\n        return {\n            years: data.years,\n            principal: data.principal,\n            income: data.income,\n            expenses: {\n                rent: rents.current,\n                other: data.monthly_expenses.other,\n            },\n        };\n    }, [\n        data.years,\n        data.principal,\n        data.income,\n        rents.current,\n        data.monthly_expenses.other,\n    ]);\n\n    const rent_breakdown = useMemo(() => {\n        return calculate_rent_breakdown(rent_data);\n    }, [rent_data]);\n\n    const profit = useMemo(() => {\n        const final_capital = rent_breakdown.final;\n        return final_capital.assets.investments;\n    }, [rent_data]);\n\n    const states = useMemo(() => {\n        return get_rent_breakdown(rent_breakdown);\n    }, [rent_breakdown]);\n\n    return {\n        states,\n        profit,\n        monthly_data,\n        update: rents.update,\n    };\n}\n\nfunction useBoth() {\n    const years = useDynamic(10);\n    const principal = useDynamic(100_000);\n\n    const monthly_expenses = useMonthlyExpenses();\n    const income = useIncome();\n\n    return {\n        years,\n        principal,\n        monthly_expenses,\n        income,\n    };\n}\n\nconst App: React.FC = () => {\n    const both = useBoth();\n    const rent = useRent({\n        years: both.years.current,\n        principal: both.principal.current,\n        income: both.income.current,\n        monthly_expenses: both.monthly_expenses.current,\n    });\n    const buy = useBuy({\n        years: both.years.current,\n        principal: both.principal.current,\n        income: both.income.current,\n        monthly_expenses: both.monthly_expenses.current,\n    });\n\n    return (\n        <main>\n            <Summary rent={rent.profit} buy={buy.profit} />\n            <Both\n                years={both.years}\n                monthly={both.monthly_expenses}\n                principal={both.principal}\n                salary={both.income.salary}\n                roi={both.income.roi}\n            />\n            <Rent\n                years={both.years.current}\n                monthly={rent.monthly_data}\n                onRentChange={rent.update}\n            />\n            <Buy\n                years={both.years.current}\n                principal={both.principal.current}\n                property_value={buy.property_value.update}\n                mortgage={buy.mortgage}\n                expenses_for={buy.expenses_for.update}\n            />\n            <DualBreakdown\n                years={both.years.current}\n                rent={rent.states}\n                buy={buy.states}\n            />\n        </main>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}