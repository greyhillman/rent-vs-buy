{"version":3,"sources":["primitive/Label.tsx","primitive/NumberInput.tsx","primitive/PercentInput.tsx","Income.tsx","Expenses.tsx","Both.tsx","model/Dynamic.ts","model/Mortgage.ts","primitive/Checkbox.tsx","primitive/CurrencyOutput.tsx","Mortgage.tsx","Property.tsx","PropertyExpenses.tsx","Buy.tsx","model/Property.ts","RentPlace.tsx","model/RentPlace.ts","model/Array.ts","model/RentPlaces.ts","RentPlaces.tsx","Rent.tsx","Summary.tsx","TOutline.tsx","DualBreakdown.tsx","model/Account.ts","model/Option.ts","model/Tree.ts","model/Buy.ts","model/Rent.ts","App.tsx","index.tsx"],"names":["Label","props","help","className","undefined","name","children","useOnChange","options","x","onChange","min","max","Math","clamp","NumberInput","type","step","value","event","target","disabled","enabled","PercentInput","e","Test","salary","current","update","rate_of_return","Expenses","utilities","internet","other","Both","years","principal","monthly","Income","roi","useDynamic","initial","useState","setCurrent","new_value","_","calculate_monthly_rate","mortgage","r","interest_rate","n","length","Checkbox","checked","CurrencyOutput","CAD","Intl","NumberFormat","style","currency","maximumFractionDigits","minimumFractionDigits","format","Mortgage","use_principal","useEffect","downpayment","valuation","rate","monthly_payment","Property","purchasePrice","purchase_price","final_value","PropertyExpenses","tax_rate","maintenance","additional","useMortgageValuation","data","values","useMemo","push","monthly_rate","month","get_mortgage_values","useCallback","year","Buy","property","initial_value","create_valuation","useProperty","house_price","useMortgage","expenses","total_expenses_for","property_value","property_tax_rate","tax","value_at","expenses_for","RentPlace","rent","include_utilities","include_internet","rent_change","includes","useRentPlace","true_rent","Array","prototype","sum","this","reduce","acc","zip","min_length","filter","i","map","zip_with","fn","replace_at","index","calculate_total_rent_for","places","place","last","calculate_last_year","total_years","p","can_add","useRentPlaces","R","add_enabled","add","update_initial","new_place","current_place","slice","update_at","update_last","new_valuation","LastRentPlace","Error","RentPlaces","total_valuation","new_year","onClick","Rent","onRentChange","Summary","buy","BlockCurrencyOutput","Account","details","detail","TOutline","left","right","YearSelect","year_options","selected","BalanceOutline","assets","liabilities","IncomeOutline","income","DualBreakdown","year_select","year_breakdown","id","profit","capital","leaf_account","tree_sum","tree","c","from_accounts","evaluate_option","eval_year","num_years","year_breakdowns","prev_capital","breakdown","final","get_capital_account","get_profit_account","get_breakdown","total","get_capital_accounts","investments","get_profit_accounts","get_property_accounts","get_monthly_accounts","useBuy","mortgage_value","house_value","buy_data","monthly_expenses","buy_breakdown","calculate_buy_breakdown","states","get_buy_breakdown","useRent","rents","monthly_data","rent_data","rent_breakdown","calculate_rent_breakdown","get_rent_breakdown","useBoth","useMonthlyExpenses","useIncome","App","both","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gYAoBeA,EAZqB,SAACC,GACjC,IAAMC,EAAOD,EAAMC,KAAO,mBAAGC,UAAU,OAAb,SAAqBF,EAAMC,YAAYE,EAEjE,OACI,kCACI,iCAASH,EAAMI,OACf,qBAAKF,UAAU,QAAf,SAAwBF,EAAMK,WAC7BJ,M,KCeb,SAASK,EAAYC,GACjB,OAAO,SAACC,GACJD,EAAQE,SAnBhB,SAAeD,EAAWE,EAAcC,GAQpC,OAPID,IACAF,EAAII,KAAKD,IAAIH,EAAGE,IAEhBC,IACAH,EAAII,KAAKF,IAAIF,EAAGG,IAGbH,EAWcK,CAAML,EAAGD,EAAQG,IAAKH,EAAQI,OAIvD,IAgBeG,EAhBsB,SAACd,GAAW,IAAD,IACtCS,EAAWH,EAAYN,GAE7B,OACI,uBACIe,KAAK,SACLL,IAAKV,EAAMU,IACXC,IAAKX,EAAMW,IACXK,KAAI,UAAEhB,EAAMgB,YAAR,QAAgB,EACpBC,MAAOjB,EAAMiB,MACbR,SAAU,SAACS,GAAD,OAAWT,GAAUS,EAAMC,OAAOF,QAC5CG,WAAU,UAAEpB,EAAMqB,eAAR,aCzBPC,EAbuB,SAACtB,GAAW,IAAD,EAC7C,OACI,uBACIU,IAAK,EACLC,IAAK,IACLK,KAAI,UAAEhB,EAAMgB,YAAR,QAAgB,EACpBD,KAAK,SACLE,MAAOjB,EAAMiB,MACbR,SAAU,SAACc,GAAD,OAAOvB,EAAMS,UAAUc,EAAEJ,OAAOF,WCsBvCO,EA5Be,SAACxB,GAC3B,OACI,qCACI,mDACA,cAAC,EAAD,CACII,KAAK,eACLH,KAAK,mFAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNC,MAAOjB,EAAMyB,OAAOC,QACpBjB,SAAUT,EAAMyB,OAAOE,WAG/B,cAAC,EAAD,CACIvB,KAAK,qBACLH,KAAK,4DAFT,SAII,cAAC,EAAD,CACIgB,MAAOjB,EAAM4B,eAAeF,QAC5BjB,SAAUT,EAAM4B,eAAeD,eCoBpCE,EAzCmB,SAAC7B,GAC/B,OACI,qCACI,sDACA,cAAC,EAAD,CACII,KAAK,YACLH,KAAK,qEAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNC,MAAOjB,EAAM8B,UAAUJ,QACvBjB,SAAUT,EAAM8B,UAAUH,WAGlC,cAAC,EAAD,CACIvB,KAAK,WACLH,KAAK,gDAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,GACNC,MAAOjB,EAAM+B,SAASL,QACtBjB,SAAUT,EAAM+B,SAASJ,WAGjC,cAAC,EAAD,CACIvB,KAAK,QACLH,KAAK,oKAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNC,MAAOjB,EAAMgC,MAAMN,QACnBjB,SAAUT,EAAMgC,MAAML,eCU3BM,EApCe,SAACjC,GAC3B,OACI,0BAASE,UAAU,OAAnB,UACI,qDACA,cAAC,EAAD,CACIE,KAAK,QACLH,KAAK,oDAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,EACNC,MAAOjB,EAAMkC,MAAMR,QACnBjB,SAAUT,EAAMkC,MAAMP,WAG9B,cAAC,EAAD,CACIvB,KAAK,YACLH,KAAK,kGAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNC,MAAOjB,EAAMmC,UAAUT,QACvBjB,SAAUT,EAAMmC,UAAUR,WAGlC,cAAC,EAAD,CACII,SAAU/B,EAAMoC,QAAQL,SACxBD,UAAW9B,EAAMoC,QAAQN,UACzBE,MAAOhC,EAAMoC,QAAQJ,QAEzB,cAACK,EAAD,CAAQZ,OAAQzB,EAAMyB,OAAQG,eAAgB5B,EAAMsC,U,QCvCzD,SAASC,EAAcC,GAG1B,MAA8BC,oBAAS,kBAAMD,KAA7C,mBAAOd,EAAP,KAAgBgB,EAAhB,KAEA,MAAO,CACHhB,UACAC,OAAQ,SAACgB,GACLD,GAAW,SAACE,GAAD,OAAOD,OCVvB,SAASE,EAAuBC,GACnC,IAAMC,EAAID,EAASE,cAAgB,GAC7BC,EAAsB,GAAlBH,EAASI,OAKnB,OAJUJ,EAAS7B,OAEW8B,EAAC,SAAI,EAAIA,EAAME,KAAO,SAAC,EAAIF,EAAME,GAAI,G,UCIxDE,EAVmB,SAACnD,GAC/B,OACI,uBACIe,KAAK,WACLqC,QAASpD,EAAMiB,MACfR,SAAU,SAACc,GAAD,OAAOvB,EAAMS,SAASc,EAAEJ,OAAOiC,aCMtCC,G,MAXyB,SAACrD,GACrC,IAAMsD,EAAM,IAAIC,KAAKC,aAAa,QAAS,CACvCC,MAAO,WACPC,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,IAG3B,OAAO,wBAAQ1D,UAAU,WAAlB,SAA8BoD,EAAIO,OAAO7D,EAAMiB,WCiE3C6C,EA9DmB,SAAC9D,GAC/B,IAAM+D,EAAgBxB,GAAW,GAQjC,OANAyB,qBAAU,WACFD,EAAcrC,SACd1B,EAAMiE,YAAYtC,OAAO3B,EAAMmC,aAEpC,CAACnC,EAAMmC,UAAW4B,EAAcrC,UAG/B,qCACI,8CACA,cAAC,EAAD,CACItB,KAAK,gBACLH,KAAK,2LAFT,SAII,cAAC,EAAD,CACIgB,MAAO8C,EAAcrC,QACrBjB,SAAUsD,EAAcpC,WAGhC,cAAC,EAAD,CACIvB,KAAK,cACLH,KAAK,kGAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNL,IAAKX,EAAMmC,UACXlB,MAAOjB,EAAMiE,YAAYvC,QACzBjB,SAAUT,EAAMiE,YAAYtC,OAC5BN,SAAU0C,EAAcrC,YAGhC,cAAC,EAAD,CAAOtB,KAAK,SAASH,KAAK,wBAA1B,SACI,cAAC,EAAD,CAAgBgB,MAAOjB,EAAMkE,UAAU,OAE3C,cAAC,EAAD,CAAO9D,KAAK,SAASH,KAAK,kCAA1B,SACI,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,EACNC,MAAOjB,EAAMkD,OAAOxB,QACpBjB,SAAUT,EAAMkD,OAAOvB,WAG/B,cAAC,EAAD,CAAOvB,KAAK,oBAAZ,SACI,cAAC,EAAD,CACIY,KAAM,GACNC,MAAOjB,EAAMmE,KAAKzC,QAClBjB,SAAUT,EAAMmE,KAAKxC,WAG7B,cAAC,EAAD,CACIvB,KAAK,kBACLH,KAAK,gHAFT,SAII,cAAC,EAAD,CAAgBgB,MAAOjB,EAAMoE,wBCxB9BC,EAvCmB,SAACrE,GAC/B,IAAMsE,EAAgBtE,EAAMuE,eACtBjC,EAAMtC,EAAMsC,IACZkC,EAAcxE,EAAMwE,YAE1B,OACI,qCACI,8CACA,cAAC,EAAD,CACIpE,KAAK,iBACLH,KAAK,uFAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNC,MAAOqD,EAAc5C,QACrBjB,SAAU6D,EAAc3C,WAGhC,cAAC,EAAD,CACIvB,KAAK,iBACLH,KAAK,4HAFT,SAII,cAAC,EAAD,CACIe,KAAM,EACNC,MAAOqB,EAAIZ,QACXjB,SAAU6B,EAAIX,WAGtB,cAAC,EAAD,CACIvB,KAAK,cACLH,KAAK,2CAFT,SAII,cAAC,EAAD,CAAgBgB,MAAOuD,UCexBC,EAhD2B,SAACzE,GACvC,OACI,qCACI,8CACA,mBAAGE,UAAU,OAAb,oKAKA,qCACI,oDACA,cAAC,EAAD,CACIE,KAAK,WACLH,KAAK,mJAFT,SAII,cAAC,EAAD,CACIgB,MAAOjB,EAAM0E,SAAShD,QACtBjB,SAAUT,EAAM0E,SAAS/C,OACzBX,KAAM,WAIlB,cAAC,EAAD,CACIZ,KAAK,cACLH,KAAK,6IAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNC,MAAOjB,EAAM2E,YAAYjD,QACzBjB,SAAUT,EAAM2E,YAAYhD,WAGpC,cAAC,EAAD,CACIvB,KAAK,kBACLH,KAAK,qJAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNC,MAAOjB,EAAM4E,WAAWlD,QACxBjB,SAAUT,EAAM4E,WAAWjD,eCpB/C,SAASkD,EAAqBC,GAC1B,IAAMC,EAASC,mBAAQ,WACnB,ONhBD,SAA6BF,GAChC,IAAMC,EAAS,GACX9D,EAAQ6D,EAAK7D,MAEjB8D,EAAOE,KAAKhE,GAIZ,IAFA,IAAMiE,EAAerC,EAAuBiC,GAErC7D,EAAQ,GAAG,CACd,IAAK,IAAIkE,EAAQ,EAAGA,GAAS,GAAIA,IAG7BlE,EAAQA,EAFSA,GAAS6D,EAAK9B,cAAgB,IAEpBkC,EAG/BH,EAAOE,KAAKhE,GAGhB,OAAO8D,EMFIK,CAAoBN,KAC5B,CAACA,EAAK9B,cAAe8B,EAAK5B,OAAQ4B,EAAK7D,QAE1C,OAAOoE,uBACH,SAACC,GACG,OAAOP,EAAOO,KAElB,CAACP,IAsFT,IAkDeQ,EAlDc,SAACvF,GAC1B,IAnBsB8E,EAmBhBU,EA1DV,WACI,IAAMvE,EAAQsB,EAAW,KACnBD,EAAMC,EAAW,GAEjBuC,EAAqBE,mBAAQ,WAC/B,MAAO,CACHS,cAAexE,EAAMS,QACrBY,IAAKA,EAAIZ,QAAU,OAExB,CAACT,EAAMS,QAASY,EAAIZ,UAEjBwC,EAAYmB,sBC3Ef,SAA0BP,GAC7B,OAAO,SAACQ,GACJ,OAAOR,EAAKW,eAAiB,EAAIX,EAAKxC,IAAMgD,IDyElBI,CAAiBZ,GAAO,CAACA,IAEvD,MAAO,CACH7D,QACAqB,MACA4B,aA0CayB,GACX7C,EApFV,SAAqB8C,GACjB,IAAM3B,EAAc1B,EAAW,KACzBW,EAASX,EAAW,IACpB4B,EAAO5B,EAAW,GAElBuC,EAAqBE,mBAAQ,WAC/B,MAAO,CACHhC,cAAemB,EAAKzC,QAAU,IAC9BwB,OAAQA,EAAOxB,QACfT,MAAO2E,EAAc3B,EAAYvC,WAEtC,CAACyC,EAAKzC,QAASwB,EAAOxB,QAASkE,EAAa3B,EAAYvC,UAErDwC,EAAYW,EAAqBC,GACjCV,EAAkBvB,EAAuBiC,GAE/C,MAAO,CACHb,cACAf,SACAiB,OACAD,YACAE,mBA+DayB,CAAYL,EAASvE,MAAMS,SACtCoE,EAnCC,CACHpB,SALanC,EAAW,GAMxBoC,YALgBpC,EAAW,GAM3BqC,WALerC,EAAW,IAsCxBwD,GAtBgBjB,EAsBsB,CACxCkB,eAAgBR,EAAStB,UACzB+B,kBAAmBH,EAASpB,SAAShD,QAAU,IAC/CkD,WAAYkB,EAASlB,WAAWlD,QAChCiD,YAAamB,EAASnB,YAAYjD,SAzB/B2D,uBACH,SAACC,GACG,MAAO,CACHY,IAAKpB,EAAKkB,eAAeV,GAAQR,EAAKmB,kBACtCtB,YAAaG,EAAKH,YAClBC,WAAYE,EAAKF,cAGzB,CACIE,EAAKmB,kBACLnB,EAAKkB,eACLlB,EAAKF,WACLE,EAAKH,eA8Bb,OAdAX,qBAAU,WACNhE,EAAM8C,SAASqD,SAASrD,EAASoB,WACjClE,EAAM8C,SAASsB,gBAAgBzC,OAAOmB,EAASsB,iBAC/CpE,EAAM8C,SAASmB,YAAYtC,OAAOmB,EAASmB,YAAYvC,SACvD1B,EAAMoG,aAAaL,GACnB/F,EAAMgG,eAAeR,EAAStB,aAC/B,CACCpB,EAASoB,UACTpB,EAASsB,gBACTtB,EAASmB,YAAYvC,QACrBqE,EACAP,EAAStB,YAIT,0BAAShE,UAAU,MAAnB,UACI,wCACA,cAAC,EAAD,CACIqE,eAAgBiB,EAASvE,MACzBqB,IAAKkD,EAASlD,IACdkC,YAAagB,EAAStB,UAAUlE,EAAMkC,SAE1C,cAAC,EAAD,CACIC,UAAWnC,EAAMmC,UACjBgC,KAAMrB,EAASqB,KACfjB,OAAQJ,EAASI,OACjBgB,UAAWpB,EAASoB,UACpBD,YAAanB,EAASmB,YACtBG,gBAAiBtB,EAASsB,kBAE9B,cAAC,EAAD,CACIM,SAAUoB,EAASpB,SACnBC,YAAamB,EAASnB,YACtBC,WAAYkB,EAASlB,iB,UE3BtByB,EA5EoB,SAACrG,GAChC,MArCiB,SAACoC,GAClB,IAAMkE,EAAO/D,EAAW,GAClBgE,EAAoBhE,GAAW,GAC/BiE,EAAmBjE,GAAW,GAC9BkE,EAAclE,EAAW,GAEzBuC,EAA0BE,mBAAQ,WACpC,MAAO,CACHsB,KAAMA,EAAK5E,QACX+E,YAAaA,EAAY/E,QACzBgF,SAAU,CACN5E,UAAWyE,EAAkB7E,QAC7BK,SAAUyE,EAAiB9E,SAE/BU,QAASA,KAEd,CACCkE,EAAK5E,QACL+E,EAAY/E,QACZ6E,EAAkB7E,QAClB8E,EAAiB9E,QACjBU,EAAQL,SACRK,EAAQN,YAGNoC,EAAYc,mBAAQ,kBCpCvB,SAA0BF,GAC7B,OAAO,SAACQ,GACJ,OACIR,EAAKwB,KACLxB,EAAK2B,aAAenB,EAAO,IAC1BR,EAAK4B,SAAS5E,UAAY,EAAIgD,EAAK1C,QAAQN,YAC3CgD,EAAK4B,SAAS3E,SAAW,EAAI+C,EAAK1C,QAAQL,WD8BnB2D,CAAiBZ,KAAO,CAACA,IAEzD,MAAO,CACHwB,OACAC,oBACAC,mBACAC,cACAvC,aAWAyC,CAAa3G,EAAMoC,SALnBkE,EADJ,EACIA,KACAC,EAFJ,EAEIA,kBACAC,EAHJ,EAGIA,iBACAC,EAJJ,EAIIA,YACAvC,EALJ,EAKIA,UAOJ,OAJAF,qBAAU,WACNhE,EAAM4G,UAAUjF,OAAOuC,KACxB,CAACA,IAGA,2BAAUhE,UAAU,QAApB,UACI,cAAC,EAAD,CACIE,KAAK,eACLH,KAAK,2CAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,IACNC,MAAOqF,EAAK5E,QACZjB,SAAU6F,EAAK3E,WAGvB,cAAC,EAAD,CACIvB,KAAK,qBACLH,KAAK,mCAFT,SAII,cAAC,EAAD,CACIgB,MAAOsF,EAAkB7E,QACzBjB,SAAU8F,EAAkB5E,WAGpC,cAAC,EAAD,CACIvB,KAAK,oBACLH,KAAK,kCAFT,SAII,cAAC,EAAD,CACIgB,MAAOuF,EAAiB9E,QACxBjB,SAAU+F,EAAiB7E,WAGnC,cAAC,EAAD,CACIvB,KAAK,gBACLH,KAAK,6CAFT,SAII,cAAC,EAAD,CACIS,IAAK,EACLM,KAAM,EACNC,MAAOjB,EAAMkC,MAAMjB,MAAMS,QACzBjB,SAAUT,EAAMkC,MAAMjB,MAAMU,OAC5BN,QAASrB,EAAMkC,MAAMb,YAG7B,cAAC,EAAD,CACIjB,KAAK,kBACLH,KAAK,iDAFT,SAII,cAAC,EAAD,CACIe,KAAM,GACNC,MAAOwF,EAAY/E,QACnBjB,SAAUgG,EAAY9E,WAG9B,cAAC,EAAD,CACIvB,KAAK,oBACLH,KAAK,mEAFT,SAII,cAAC,EAAD,CAAgBgB,MAAOiD,EAAU,WE5HjD2C,MAAMC,UAAUC,IAJT,WACH,OAAOC,KAAKC,QAAO,SAACC,EAAK1G,GAAN,OAAY0G,EAAM1G,IAAG,IAc5CqG,MAAMC,UAAUK,IATT,SAA8BnF,GACjC,IAAMoF,EAAaxG,KAAKF,IAAIsG,KAAK9D,OAAQlB,EAAMkB,QAE/C,OAAO8D,KAAKK,QAAO,SAACzE,EAAG0E,GAAJ,OAAUA,EAAIF,KAAYG,KAAI,SAACtG,EAAOqG,GAAR,MAAc,CAC3DrG,EACAe,EAAMsF,QAcdT,MAAMC,UAAUU,SART,SAEHxF,EACAyF,GAEA,OAAOT,KAAKG,IAAInF,GAAOuF,IAAIE,IAS/BZ,MAAMC,UAAUY,WAJT,SAAkCC,EAAe1G,GACpD,OAAO+F,KAAKO,KAAI,SAAC/G,EAAG8G,GAAJ,OAAWA,IAAMK,EAAQ1G,EAAQT,M,0BChC9C,SAASoH,EACZC,EACAvC,GACO,IAAD,gBACcuC,EAAOrF,SADrB,IACN,2BAAoC,CAAC,IAA1BsF,EAAyB,QAChC,GAAIxC,GAAQwC,EAAM5F,MACd,OAA8B,GAAvB4F,EAAM3B,SAASb,GAG1BA,GAAQwC,EAAM5F,OANZ,8BASN,OAA2B,GAApB2F,EAAOE,KAAKzC,GAGhB,SAAS0C,EACZC,EACAJ,GAEA,OAAOI,EAAcJ,EAAOrF,QAAQ+E,KAAI,SAACW,GAAD,OAAOA,EAAEhG,SAAO6E,MAarD,SAASoB,EAAQF,EAAqBJ,GACzC,OAAOG,EAAoBC,EAAaJ,GAAU,E,MCXtD,SAASO,EAAcH,GACnB,IAAMJ,EAAStF,EAA2B,CACtCC,QAAS,GACTuF,KAAM,SAACnF,GAAD,OAAO,KAGXsB,EAAYmB,sBACdgD,IAAUT,EAA0B,CAACC,EAAOnG,UAC5C,CAACmG,EAAOnG,UAGZ,MAAO,CACHmG,OAAQA,EAAOnG,QACf4G,YAAaH,EAAQF,EAAaJ,EAAOnG,SACzC6G,IAAK,WACDV,EAAOlG,ODDZ,SAAakG,GAChB,IAAME,EAAkB,CACpB5B,SAAU0B,EAAOE,KACjB7F,MAAO,GAGX,MAAO,CACHM,QAAQ,GAAD,mBAAMqF,EAAOrF,SAAb,CAAsBuF,IAC7BA,KAAM,SAACnF,GAAD,OAAO,ICPK2F,CAAIV,EAAOnG,WAE7B8G,eAAgB,SAACb,EAAec,GAC5BZ,EAAOlG,ODQZ,SACHkG,EACAF,EACAG,GAEA,IAAMY,EAAgBb,EAAOrF,QAAQmF,GAE/Bc,EAAS,2BACRC,GACAZ,GAGP,OAAO,2BACAD,GADP,IAEIrF,QAAQ,GAAD,mBACAqF,EAAOrF,QAAQmG,MAAM,EAAGhB,IADxB,CAEHc,GAFG,YAGAZ,EAAOrF,QAAQmG,MAAMhB,EAAQ,OCzBlBiB,CAAUf,EAAOnG,QAASiG,EAAOc,KAEnDI,YAAa,SAAC3E,GACV2D,EAAOlG,ODrBZ,SACHkG,EACAiB,GAEA,OAAO,2BACAjB,GADP,IAEIE,KAAMe,ICeYD,CAAYhB,EAAOnG,QAASwC,KAE9CA,aAcR,IAAM6E,EAA8C,SAAC/I,GACjD,IAAM4G,EAAY,CACdlF,QAAS1B,EAAMkE,UACfvC,OAAQ3B,EAAM6I,aAGZ3F,EAAiB,CACnB7B,SAAS,EACTJ,MAAO,CACHS,QAAS1B,EAAMkC,MACfP,OAAQ,SAACiB,GACL,MAAM,IAAIoG,MAAM,uCAK5B,OACI,cAAC,EAAD,CACIpC,UAAWA,EACXxE,QAASpC,EAAMoC,QACfF,MAAOgB,KAkEJ+F,EA7DqB,SAACjJ,GACjC,MAOIoI,EAAcpI,EAAMkC,OANpB2F,EADJ,EACIA,OACAU,EAFJ,EAEIA,IACAC,EAHJ,EAGIA,eACAK,EAJJ,EAIIA,YACAP,EALJ,EAKIA,YACWY,EANf,EAMIhF,UAOJ,OAJAF,qBAAU,WACNhE,EAAMkE,UAAUgF,KACjB,CAACA,IAGA,0BAAShJ,UAAU,SAAnB,UACI,+BACK2H,EAAOrF,QAAQ+E,KAAI,SAACO,EAAOH,GACxB,IAAMf,EAAoC,CACtClF,QAASoG,EAAM3B,SACfxE,OAAQ,SAACmH,GACLN,EAAeb,EAAO,CAAExB,SAAU2C,MAIpC5G,EAAgB,CAClBjB,MAAO,CACHS,QAASoG,EAAM5F,MACfP,OAAQ,SAACwH,GACLX,EAAeb,EAAO,CAAEzF,MAAOiH,MAGvC9H,SAAS,GAGb,OACI,6BACI,cAAC,EAAD,CACIuF,UAAWA,EACXxE,QAASpC,EAAMoC,QACfF,MAAOA,KAJNyF,MASjB,6BACI,cAAC,EAAD,CACIvF,QAASpC,EAAMoC,QACfyG,YAAaA,EACb3E,UAAW2D,EAAOE,KAClB7F,MAAO8F,EAAoBhI,EAAMkC,MAAO2F,UAIpD,wBAAQuB,QAASb,EAAKnH,UAAWkH,EAAjC,mCC1HZ,IAmBee,EAnBe,SAACrJ,GAC3B,IAAQkE,EAND,CACHA,UAHc3B,GAA0B,SAACK,GAAD,OAAO,MAQ3CsB,UAMR,OAJAF,qBAAU,WACNhE,EAAMsJ,aAAapF,EAAUxC,WAC9B,CAACwC,EAAUxC,UAGV,0BAASxB,UAAU,OAAnB,UACI,yCACA,cAAC,EAAD,CACIgC,MAAOlC,EAAMkC,MACbE,QAASpC,EAAMoC,QACf8B,UAAWA,EAAUvC,aCVtB4H,EAlBkB,SAACvJ,GAC9B,OACI,mCACI,yCACA,0BAASE,UAAU,OAAnB,UACI,yCACA,iDACA,cAAC,EAAD,CAAgBe,MAAOjB,EAAMsG,UAEjC,0BAASpG,UAAU,MAAnB,UACI,wCACA,cAAC,EAAD,CAAgBe,MAAOjB,EAAMwJ,MAC7B,wDCRVC,G,MAAqD,SAACzJ,GACxD,OACI,8BACI,cAAC,EAAD,eAAoBA,QAK1B0J,EAAiC,SAAjCA,EAAkC1J,GACpC,IAAM2J,EAAU3J,EAAMK,UAAY,GAClC,OACI,0BAASH,UAAU,UAAnB,UACI,iCAASF,EAAMI,OACf,cAAC,EAAD,CAAqBa,MAAOjB,EAAMiB,QACjC0I,EAAQpC,KAAI,SAACqC,GAAD,OACT,cAACF,EAAD,eAA+BE,GAAjBA,EAAOxJ,aAoCtByJ,EA9BmB,SAAC7J,GAC/B,IAAM2J,EAAU,CACZG,KAAM9J,EAAM8J,KAAKzJ,UAAY,GAC7B0J,MAAO/J,EAAM+J,MAAM1J,UAAY,IAGnC,OACI,0BAASH,UAAU,WAAnB,UACI,mCACI,6BAAKF,EAAM8J,KAAK1J,OAChB,6BAAKJ,EAAM+J,MAAM3J,UAErB,yBAASF,UAAU,OAAnB,SACKyJ,EAAQG,KAAKvC,KAAI,SAACqC,GACf,OAAO,cAAC,EAAD,eAA+BA,GAAjBA,EAAOxJ,WAGpC,yBAASF,UAAU,QAAnB,SACKyJ,EAAQI,MAAMxC,KAAI,SAACqC,GAChB,OAAO,cAAC,EAAD,eAA+BA,GAAjBA,EAAOxJ,WAGpC,mCACI,cAAC,EAAD,CAAqBa,MAAOjB,EAAM8J,KAAK7I,QACvC,cAAC,EAAD,CAAqBA,MAAOjB,EAAM+J,MAAM9I,eC5BlD+I,G,MAAwC,SAAChK,GAG3C,IAFA,IAAMiK,EAA8B,GAE3B3E,EAAO,EAAGA,GAAQtF,EAAMkC,MAAOoD,IACpC2E,EAAahF,KACT,yBAAQiF,SAAU5E,IAAStF,EAAMiB,MAAOA,MAAOqE,EAA/C,kBACUA,MAKlB,OACI,uBACIvE,KAAK,QACLL,IAAK,EACLC,IAAKX,EAAMkC,MACXlB,KAAM,EACNC,MAAOjB,EAAMiB,MACbR,SAAU,SAACc,GAAD,OAAOvB,EAAMS,UAAUc,EAAEJ,OAAOF,YAKhDkJ,EAA8D,SAACnK,GACjE,OAAO,cAAC,EAAD,CAAU8J,KAAM9J,EAAMoK,OAAQL,MAAO/J,EAAMqK,eAGhDC,EAA4D,SAACtK,GAC/D,OAAO,cAAC,EAAD,CAAU8J,KAAM9J,EAAMuK,OAAQR,MAAO/J,EAAM8F,YAuCvC0E,EApCwB,SAACxK,GACpC,IAAMyK,EAAclI,EAAW,GAEzBmI,EAAiB,CACnBpE,KAAMtG,EAAMsG,KAAKpE,MAAMuI,EAAY/I,QAAU,GAC7C8H,IAAKxJ,EAAMwJ,IAAItH,MAAMuI,EAAY/I,QAAU,IAG/C,OACI,0BAASiJ,GAAG,YAAZ,UACI,2CACA,0BAASzK,UAAU,UAAnB,UACI,yCACA,cAAC,EAAD,eAAoBF,EAAMsG,KAAK9D,UAC/B,cAAC,EAAD,eAAoBxC,EAAMwJ,IAAIhH,aAElC,uCAAUiI,EAAY/I,WACtB,cAAC,EAAD,CACIT,MAAOwJ,EAAY/I,QACnBjB,SAAUgK,EAAY9I,OACtBO,MAAOlC,EAAMkC,QAEjB,0BAAShC,UAAU,OAAnB,UACI,0BAASA,UAAU,OAAnB,UACI,cAAC,EAAD,eAAmBwK,EAAepE,KAAKsE,SACvC,cAAC,EAAD,eAAoBF,EAAepE,KAAKuE,aAE5C,0BAAS3K,UAAU,MAAnB,UACI,cAAC,EAAD,eAAmBwK,EAAelB,IAAIoB,SACtC,cAAC,EAAD,eAAoBF,EAAelB,IAAIqB,oBClFpD,SAASC,EAAa1K,EAAca,GACvC,MAAO,CACHb,OACAa,QACAZ,SAAU,IAIlB,SAAS0K,EAASC,GACd,YAAmB7K,IAAf6K,EAAK/J,MACE+J,EAAK/J,MAGT+J,EAAK3K,SAASkH,KAAI,SAAC0D,GAAD,OAAOF,EAASE,MAAIlE,MAG1C,SAASmE,EACZ9K,EACAC,EACAY,GAEA,MAAO,CACHb,OACAa,MAAK,OAAEA,QAAF,IAAEA,IAASZ,EAASkH,IAAIwD,GAAUhE,MACvC1G,SAAUA,GCFX,SAAS8K,EACZ3I,EACA4I,EACAC,GAKA,IAHA,IAAIC,EAA+C,GAC/CC,EAAe/I,EAEV8C,EAAO,EAAGA,GAAQ+F,EAAW/F,IAAQ,CAC1C,IAAMkG,EAAYJ,EAAUG,EAAcjG,GAE1CiG,EAAeC,EAAUX,QAEzBS,EAAgBrG,KAAKuG,GAKzB,MAAO,CACHhJ,QAASA,EACTN,MAAOoJ,EACPG,MALUH,EAAgBA,EAAgBpI,OAAS,GAAG2H,SAoB9D,SAASa,EAAoB5G,GACzB,MAAO,CACHsF,OAAQc,EAAc,SAAUpG,EAAKsF,QACrCC,YAAaa,EAAc,cAAepG,EAAKuF,cAIvD,SAASsB,EAAmB7G,GACxB,MAAO,CACHyF,OAAQW,EAAc,SAAUpG,EAAKyF,QACrCzE,SAAUoF,EAAc,WAAYpG,EAAKgB,WAI1C,SAAS8F,EACZ9G,GAaA,MAAO,CACHtC,QAZYkJ,EAAoB5G,EAAKtC,SAarCN,MAXU4C,EAAK5C,MAAMqF,KAAI,SAACjC,GAC1B,MAAO,CACHuF,QAASa,EAAoBpG,EAAKuF,SAClCD,OAAQe,EAAmBrG,EAAKsF,YASpCa,MALUC,EAAoB5G,EAAK2G,QClFpC,SAASI,EAASb,GACrB,GAAoB,kBAATA,EACP,OAAOA,EAGX,IAAIjE,EAAM,EACV,IAAK,IAAMvG,KAAKwK,EACZjE,GAAO8E,EAAMb,EAAKxK,IAGtB,OAAOuG,EC8GX,SAAS+E,EAAqBhH,GAQ1B,MAAO,CACHsF,OANW,CAFKU,EAAa,cAAehG,EAAKsF,OAAO2B,aAC3CjB,EAAa,WAAYhG,EAAKsF,OAAO5E,WAQlD6E,YAJgB,CADHS,EAAa,WAAYhG,EAAKuF,YAAYvH,YAyB/D,SAASkJ,GAAoBlH,GAYzB,MAAO,CACHgB,SARa,CArBrB,SAA+BhB,GAK3B,OAAOoG,EAAc,WAAY,CAJrBJ,EAAa,MAAOhG,EAAKoB,KACjB4E,EAAa,cAAehG,EAAKH,aAClCmG,EAAa,aAAchG,EAAKF,cAclCqH,CAAsBnH,EAAKgB,SAASN,UACpCsF,EAAa,WAAYhG,EAAKgB,SAAShD,UAV5D,SAA8BgC,GAK1B,OAAOoG,EAAc,UAAW,CAJdJ,EAAa,YAAahG,EAAKhD,WAChCgJ,EAAa,WAAYhG,EAAK/C,UACjC+I,EAAa,QAAShG,EAAK9C,SAQzBkK,CAAqBpH,EAAKgB,SAAS1D,UAW/CmI,OAJW,CAHKO,EAAa,cAAehG,EAAKyF,OAAOwB,aAC7CjB,EAAa,SAAUhG,EAAKyF,OAAO9I,UChFtD,SAASqK,GAAqBhH,GAI1B,MAAO,CACHsF,OAHW,CADKU,EAAa,cAAehG,EAAKsF,OAAO2B,cAKxD1B,YAAa,IAIrB,SAAS2B,GAAoBlH,GAWzB,MAAO,CACHgB,SARa,CAHJgF,EAAa,OAAQhG,EAAKgB,SAASQ,MAClCwE,EAAa,QAAShG,EAAKgB,SAAS9D,QAW9CuI,OAJW,CAHKO,EAAa,cAAehG,EAAKyF,OAAOwB,aAC7CjB,EAAa,SAAUhG,EAAKyF,OAAO9I,UCnEtD,SAAS0K,GAAOrH,GACZ,IAAMb,EAAc1B,EAAW,KACzB6B,EAAkB7B,EAAW,GAE7B6J,EAAiB7J,GAAW,SAAC+C,GAAD,OAA0B,KACtDxC,EAAW,CACbmB,YAAaA,EAAYvC,QACzByE,SAAUiG,EAAe1K,QACzB0C,gBAAiBA,EAAgB1C,SAG/B2K,EAAc9J,GAAW,SAAC+C,GAAD,OAA0B,KAEnDc,EAAe7D,GACjB,SAAC+C,GACG,MAAO,CACHY,IAAK,EACLtB,WAAY,EACZD,YAAa,MAKnB2H,EAAoBtH,mBAAQ,WAC9B,IAAM5C,EAAU,CACZN,UAA6C,GAAlCgD,EAAKyH,iBAAiBzK,UACjCC,SAA2C,GAAjC+C,EAAKyH,iBAAiBxK,SAChCC,MAAqC,GAA9B8C,EAAKyH,iBAAiBvK,OAGjC,MAAO,CACHE,MAAO4C,EAAK5C,MACZkI,OAAQ,CACJjI,UAAW2C,EAAK3C,UAChBqD,SAAU6G,EAAY3K,SAE1B6I,OAAQzF,EAAKyF,OACbzE,SAAU,CACN1D,QAASA,EACTU,SAAUA,EACV0C,SAAUY,EAAa1E,YAGhC,CACCoD,EAAK5C,MACL4C,EAAK3C,UACLkK,EAAY3K,QACZoD,EAAKyF,OACLzF,EAAKyH,iBAAiBzK,UACtBgD,EAAKyH,iBAAiBxK,SACtB+C,EAAKyH,iBAAiBvK,MACtBc,EAASqD,SACTrD,EAASmB,YACTnB,EAASsB,gBACTgC,EAAa1E,UAGX8K,EAAgBxH,mBAAQ,WAC1B,OFlBD,SAAiCF,GAiDpC,OAAOqG,EAhD6C,CAChDf,OAAQ,CACJ2B,YACIjH,EAAKsF,OAAOjI,UAAY2C,EAAKgB,SAAShD,SAASmB,YACnDuB,SAAUV,EAAKsF,OAAO5E,SAAS,IAEnC6E,YAAa,CACTvH,SAAUgC,EAAKgB,SAAShD,SAASqD,SAAS,MAIvC,SAACoF,EAA0BjG,GAClC,IAAMiF,EAAqB,CACvBwB,YACIR,EAAanB,OAAO2B,aAAejH,EAAKyF,OAAOjI,IAAM,KACzDb,OAAQqD,EAAKyF,OAAO9I,QAElBqE,EAAwB,CAC1B1D,QAAS0C,EAAKgB,SAAS1D,QACvBU,SAAmD,GAAzCgC,EAAKgB,SAAShD,SAASsB,gBACjCoB,SAAUV,EAAKgB,SAASN,SAASF,IAM/BsF,EAHeiB,EAAMtB,GACJsB,EAAM/F,GAY7B,MAAO,CACH+E,QAAS,CACLT,OAVkB,CACtB2B,YAAaR,EAAanB,OAAO2B,YAAcnB,EAC/CpF,SAAUV,EAAKsF,OAAO5E,SAASF,IAS3B+E,YAP4B,CAChCvH,SAAUgC,EAAKgB,SAAShD,SAASqD,SAASb,KAQ1CsF,OAAQ,CACJL,SACAzE,eAKwBhB,EAAK5C,OE/B9BuK,CAAwBH,KAChC,CAACA,IAEE1B,EAAS5F,mBAAQ,WAOnB,OALIwH,EAAcf,MAAMrB,OAAO2B,YAC3BS,EAAcf,MAAMrB,OAAO5E,SAELgH,EAAcf,MAAMpB,YAAYvH,WAG3D,CAAC0J,IAEEE,EAAS1H,mBAAQ,WACnB,OFoED,SAA2BF,GAY9B,OAAO8G,EAAc,CACjBpJ,QAZYsJ,EAAqBhH,EAAKtC,SAatCN,MAZU4C,EAAK5C,MAAMqF,KACrB,SAACjC,GACG,MAAO,CACHuF,QAASiB,EAAqBxG,EAAKuF,SACnCD,OAAQoB,GAAoB1G,EAAKsF,YASzCa,MALUK,EAAqBhH,EAAK2G,SE9E7BkB,CAAkBH,KAC1B,CAACA,IAEJ,MAAO,CACH1J,SAAU,CACNmB,cACAkC,SAAUiG,EAAezK,OACzByC,mBAEJ4B,eAAgBqG,EAChBjG,eACAwE,SACA8B,UAqDR,SAASE,GAAQ9H,GACb,IAAM+H,EAAQtK,GAAW,SAAC+C,GAAD,OAA0B,KAE7CwH,EAAe9H,mBAAQ,WACzB,MAAO,CACHjD,SAAU+C,EAAKyH,iBAAiBxK,SAChCD,UAAWgD,EAAKyH,iBAAiBzK,aAEtC,CAACgD,EAAKyH,iBAAiBzK,UAAWgD,EAAKyH,iBAAiBxK,WAErDgL,EAAsB/H,mBAAQ,WAChC,MAAO,CACH9C,MAAO4C,EAAK5C,MACZC,UAAW2C,EAAK3C,UAChBoI,OAAQzF,EAAKyF,OACbzE,SAAU,CACNQ,KAAMuG,EAAMnL,QACZM,MAAO8C,EAAKyH,iBAAiBvK,UAGtC,CACC8C,EAAK5C,MACL4C,EAAK3C,UACL2C,EAAKyF,OACLsC,EAAMnL,QACNoD,EAAKyH,iBAAiBvK,QAGpBgL,EAAiBhI,mBAAQ,WAC3B,OD9JD,SAAkCF,GAuCrC,OAAOqG,EAtCS,CACZf,OAAQ,CACJ2B,YAAajH,EAAK3C,WAEtBkI,YAAa,KAGN,SAACkB,EAA2BjG,GACnC,IAAMiF,EAAS,CACXwB,YACIR,EAAanB,OAAO2B,aAAejH,EAAKyF,OAAOjI,IAAM,KACzDb,OAAQqD,EAAKyF,OAAO9I,QAGlBqE,EAAW,CACbQ,KAAMxB,EAAKgB,SAASQ,KAAKhB,GACzBtD,MAA6B,GAAtB8C,EAAKgB,SAAS9D,OAMnB4I,EAHeL,EAAOwB,YAAcxB,EAAO9I,QAC1BqE,EAASQ,KAAOR,EAAS9D,OAIhD,MAAO,CACH6I,QAAS,CACLT,OAAQ,CACJ2B,YAAaR,EAAanB,OAAO2B,YAAcnB,GAEnDP,YAAa,IAEjBO,OAAQ,CACJL,SACAzE,eAKwBhB,EAAK5C,OCuH9B+K,CAAyBF,KACjC,CAACA,IAEEnC,EAAS5F,mBAAQ,WAEnB,OADsBgI,EAAevB,MAChBrB,OAAO2B,cAC7B,CAACgB,IAMJ,MAAO,CACHL,OALW1H,mBAAQ,WACnB,ODlGD,SAA4BF,GAY/B,OAAO8G,EAAc,CACjBpJ,QAZYsJ,GAAqBhH,EAAKtC,SAatCN,MAZU4C,EAAK5C,MAAMqF,KACrB,SAACjC,GACG,MAAO,CACHuF,QAASiB,GAAqBxG,EAAKuF,SACnCD,OAAQoB,GAAoB1G,EAAKsF,YASzCa,MALUK,GAAqBhH,EAAK2G,SCwF7ByB,CAAmBF,KAC3B,CAACA,IAIApC,SACAkC,eACAnL,OAAQkL,EAAMlL,QAItB,SAASwL,KAOL,MAAO,CACHjL,MAPUK,EAAW,IAQrBJ,UAPcI,EAAW,KAQzBgK,iBA5FR,WACI,IAAMnK,EAAU,CACZN,UAAWS,EAAW,GACtBR,SAAUQ,EAAW,GACrBP,MAAOO,EAAW,IAGhBb,EAAU,CACZI,UAAWM,EAAQN,UAAUJ,QAC7BK,SAAUK,EAAQL,SAASL,QAC3BM,MAAOI,EAAQJ,MAAMN,SAGzB,OAAO,2BACAU,GADP,IAEIV,YAuEqB0L,GAOrB7C,OA7GR,WACI,IAAMjI,EAAMC,EAAW,GACjBd,EAASc,EAAW,KAO1B,MAAO,CACHD,MACAb,SACAC,QARY,CACZY,IAAKA,EAAIZ,QACTD,OAAQA,EAAOC,UAiGJ2L,IAUnB,IA8CeC,GA9CO,WAClB,IAAMC,EAAOJ,KACP7G,EAAOsG,GAAQ,CACjB1K,MAAOqL,EAAKrL,MAAMR,QAClBS,UAAWoL,EAAKpL,UAAUT,QAC1B6I,OAAQgD,EAAKhD,OAAO7I,QACpB6K,iBAAkBgB,EAAKhB,iBAAiB7K,UAEtC8H,EAAM2C,GAAO,CACfjK,MAAOqL,EAAKrL,MAAMR,QAClBS,UAAWoL,EAAKpL,UAAUT,QAC1B6I,OAAQgD,EAAKhD,OAAO7I,QACpB6K,iBAAkBgB,EAAKhB,iBAAiB7K,UAG5C,OACI,iCACI,cAAC,EAAD,CAAS4E,KAAMA,EAAKsE,OAAQpB,IAAKA,EAAIoB,SACrC,cAAC,EAAD,CACI1I,MAAOqL,EAAKrL,MACZE,QAASmL,EAAKhB,iBACdpK,UAAWoL,EAAKpL,UAChBV,OAAQ8L,EAAKhD,OAAO9I,OACpBa,IAAKiL,EAAKhD,OAAOjI,MAErB,cAAC,EAAD,CACIJ,MAAOqL,EAAKrL,MAAMR,QAClBU,QAASkE,EAAKwG,aACdxD,aAAchD,EAAK3E,SAEvB,cAAC,EAAD,CACIO,MAAOqL,EAAKrL,MAAMR,QAClBS,UAAWoL,EAAKpL,UAAUT,QAC1BsE,eAAgBwD,EAAIxD,eAAerE,OACnCmB,SAAU0G,EAAI1G,SACdsD,aAAcoD,EAAIpD,aAAazE,SAEnC,cAAC,EAAD,CACIO,MAAOqL,EAAKrL,MAAMR,QAClB4E,KAAMA,EAAKoG,OACXlD,IAAKA,EAAIkD,aCjRzBc,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.580e747d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Label.scss\";\r\n\r\nexport interface LabelProps {\r\n    name: string;\r\n    help?: string;\r\n}\r\n\r\nconst Label: React.FC<LabelProps> = (props) => {\r\n    const help = props.help ? <p className=\"help\">{props.help}</p> : undefined;\r\n\r\n    return (\r\n        <label>\r\n            <strong>{props.name}</strong>\r\n            <div className=\"input\">{props.children}</div>\r\n            {help}\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default Label;\r\n","import { props } from \"ramda\";\r\nimport React from \"react\";\r\nimport \"./Input.scss\";\r\n\r\ninterface Props {\r\n    min?: number;\r\n    max?: number;\r\n    step?: number;\r\n    value: number;\r\n    onChange: (x: number) => void;\r\n    enabled?: boolean;\r\n}\r\n\r\nfunction clamp(x: number, min?: number, max?: number): number {\r\n    if (min) {\r\n        x = Math.max(x, min);\r\n    }\r\n    if (max) {\r\n        x = Math.min(x, max);\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\ninterface Options {\r\n    onChange: (x: number) => void;\r\n    min?: number;\r\n    max?: number;\r\n}\r\n\r\nfunction useOnChange(options: Options): (x: number) => void {\r\n    return (x: number) => {\r\n        options.onChange(clamp(x, options.min, options.max));\r\n    };\r\n}\r\n\r\nconst NumberInput: React.FC<Props> = (props) => {\r\n    const onChange = useOnChange(props);\r\n\r\n    return (\r\n        <input\r\n            type=\"number\"\r\n            min={props.min}\r\n            max={props.max}\r\n            step={props.step ?? 1}\r\n            value={props.value}\r\n            onChange={(event) => onChange(+event.target.value)}\r\n            disabled={!(props.enabled ?? true)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NumberInput;\r\n","import React from \"react\";\r\nimport \"./Input.scss\";\r\n\r\ninterface Props {\r\n    value: number;\r\n    step?: number;\r\n    onChange: (x: number) => void;\r\n}\r\n\r\nconst PercentInput: React.FC<Props> = (props) => {\r\n    return (\r\n        <input\r\n            min={0}\r\n            max={100}\r\n            step={props.step ?? 1}\r\n            type=\"number\"\r\n            value={props.value}\r\n            onChange={(e) => props.onChange(+e.target.value)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PercentInput;\r\n","import React from \"react\";\r\nimport Label from \"./primitive/Label\";\r\nimport NumberInput from \"./primitive/NumberInput\";\r\nimport PercentInput from \"./primitive/PercentInput\";\r\nimport { Dynamic } from \"./model/Dynamic\";\r\n\r\ninterface Props {\r\n    salary: Dynamic<number>;\r\n    rate_of_return: Dynamic<number>;\r\n}\r\n\r\nconst Test: React.FC<Props> = (props) => {\r\n    return (\r\n        <fieldset>\r\n            <legend>Yearly Income</legend>\r\n            <Label\r\n                name=\"Gross income\"\r\n                help=\"What is your yearly gross income? This is your income before taxes and expenses.\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={1_000}\r\n                    value={props.salary.current}\r\n                    onChange={props.salary.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Rate of return (%)\"\r\n                help=\"What is the compunded rate of return on your investments?\"\r\n            >\r\n                <PercentInput\r\n                    value={props.rate_of_return.current}\r\n                    onChange={props.rate_of_return.update}\r\n                />\r\n            </Label>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\nexport default Test;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport Label from \"./primitive/Label\";\r\nimport NumberInput from \"./primitive/NumberInput\";\r\nimport { Dynamic } from \"./model/Dynamic\";\r\n\r\ninterface Props {\r\n    utilities: Dynamic<number>;\r\n    internet: Dynamic<number>;\r\n    other: Dynamic<number>;\r\n}\r\n\r\nconst Expenses: React.FC<Props> = (props) => {\r\n    return (\r\n        <fieldset>\r\n            <legend>Monthly Expenses</legend>\r\n            <Label\r\n                name=\"Utilities\"\r\n                help=\"How much do you spend on utilities? (hydro + electricity + sewage)\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={100}\r\n                    value={props.utilities.current}\r\n                    onChange={props.utilities.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Internet\"\r\n                help=\"How much do you spend per monthy on internet?\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={20}\r\n                    value={props.internet.current}\r\n                    onChange={props.internet.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Other\"\r\n                help=\"How much do you spend per month on other expenses? These should be expenses that are not specific to either renting or buying like groceries, car insurance, etc.\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={100}\r\n                    value={props.other.current}\r\n                    onChange={props.other.update}\r\n                />\r\n            </Label>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\nexport default Expenses;\r\n","import React from \"react\";\r\nimport Income from \"./Income\";\r\nimport Label from \"./primitive/Label\";\r\nimport NumberInput from \"./primitive/NumberInput\";\r\nimport { Dynamic } from \"./model/Dynamic\";\r\nimport Expenses from \"./Expenses\";\r\n\r\ninterface Props {\r\n    principal: Dynamic<number>;\r\n    years: Dynamic<number>;\r\n    salary: Dynamic<number>;\r\n    roi: Dynamic<number>;\r\n    monthly: {\r\n        utilities: Dynamic<number>;\r\n        internet: Dynamic<number>;\r\n        other: Dynamic<number>;\r\n    };\r\n}\r\n\r\nconst Both: React.FC<Props> = (props) => {\r\n    return (\r\n        <section className=\"both\">\r\n            <h3>During Both Options</h3>\r\n            <Label\r\n                name=\"Years\"\r\n                help=\"How many years do you plan on renting or staying?\"\r\n            >\r\n                <NumberInput\r\n                    min={1}\r\n                    step={1}\r\n                    value={props.years.current}\r\n                    onChange={props.years.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Principal\"\r\n                help=\"How much assets do you have before you rent/buy? If you buy, this is typically the downpayment.\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={1000}\r\n                    value={props.principal.current}\r\n                    onChange={props.principal.update}\r\n                />\r\n            </Label>\r\n            <Expenses\r\n                internet={props.monthly.internet}\r\n                utilities={props.monthly.utilities}\r\n                other={props.monthly.other}\r\n            />\r\n            <Income salary={props.salary} rate_of_return={props.roi} />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Both;\r\n","import { useState } from \"react\";\r\nimport { Event } from \"./Event\";\r\n\r\n// This is basically like a Dynamic from Haskell's `reflex` library.\r\n// Because it uses React's `useState` under-the-hood, it does not have\r\n// the same denotational semantics as `reflex` does.\r\nexport interface Dynamic<T> {\r\n    readonly current: T;\r\n    readonly update: Event<T>;\r\n}\r\n\r\nexport function useDynamic<T>(initial: T): Dynamic<T> {\r\n    // Have to use function initializer as passing in a function for `initial`\r\n    // would just evaluate the function.\r\n    const [current, setCurrent] = useState(() => initial);\r\n\r\n    return {\r\n        current,\r\n        update: (new_value) => {\r\n            setCurrent((_) => new_value);\r\n        },\r\n    };\r\n}\r\n","export interface Mortgage {\r\n    value: number;\r\n    interest_rate: number;\r\n    length: number;\r\n}\r\n\r\nexport type MortgageValuation = (year: number) => number;\r\n\r\n// https://www.wikihow.com/Calculate-Mortgage-Payments#Calculating-Mortgage-Payments-with-an-Equation\r\nexport function calculate_monthly_rate(mortgage: Mortgage): number {\r\n    const r = mortgage.interest_rate / 12;\r\n    const n = mortgage.length * 12;\r\n    const P = mortgage.value;\r\n\r\n    const monthly_payment = (P * (r * (1 + r) ** n)) / ((1 + r) ** n - 1);\r\n\r\n    return monthly_payment;\r\n}\r\n\r\nexport function get_mortgage_values(data: Mortgage): number[] {\r\n    const values = [];\r\n    let value = data.value;\r\n\r\n    values.push(value);\r\n\r\n    const monthly_rate = calculate_monthly_rate(data);\r\n\r\n    while (value > 0) {\r\n        for (let month = 1; month <= 12; month++) {\r\n            const interest = value * (data.interest_rate / 12);\r\n\r\n            value = value + interest - monthly_rate;\r\n        }\r\n\r\n        values.push(value);\r\n    }\r\n\r\n    return values;\r\n}\r\n","import React from \"react\";\r\nimport \"./Checkbox.scss\";\r\n\r\ninterface Props {\r\n    value: boolean;\r\n    onChange: (x: boolean) => void;\r\n}\r\n\r\nconst Checkbox: React.FC<Props> = (props) => {\r\n    return (\r\n        <input\r\n            type=\"checkbox\"\r\n            checked={props.value}\r\n            onChange={(e) => props.onChange(e.target.checked)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Checkbox;\r\n","import React from \"react\";\r\n\r\nimport \"./CurrencyOutput.scss\";\r\n\r\nexport interface Props {\r\n    value: number;\r\n}\r\n\r\nconst CurrencyOutput: React.FC<Props> = (props) => {\r\n    const CAD = new Intl.NumberFormat(\"en-CA\", {\r\n        style: \"currency\",\r\n        currency: \"CAD\",\r\n        maximumFractionDigits: 0,\r\n        minimumFractionDigits: 0,\r\n    });\r\n\r\n    return <output className=\"currency\">{CAD.format(props.value)}</output>;\r\n};\r\n\r\nexport default CurrencyOutput;\r\n","import React, { useEffect } from \"react\";\r\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\r\nimport { MortgageValuation } from \"./model/Mortgage\";\r\nimport Checkbox from \"./primitive/Checkbox\";\r\nimport CurrencyOutput from \"./primitive/CurrencyOutput\";\r\nimport Label from \"./primitive/Label\";\r\nimport NumberInput from \"./primitive/NumberInput\";\r\nimport PercentInput from \"./primitive/PercentInput\";\r\n\r\ninterface Props {\r\n    principal: number;\r\n    valuation: MortgageValuation;\r\n    monthly_payment: number;\r\n\r\n    downpayment: Dynamic<number>;\r\n    length: Dynamic<number>;\r\n    rate: Dynamic<number>;\r\n}\r\n\r\nconst Mortgage: React.FC<Props> = (props) => {\r\n    const use_principal = useDynamic(false);\r\n\r\n    useEffect(() => {\r\n        if (use_principal.current) {\r\n            props.downpayment.update(props.principal);\r\n        }\r\n    }, [props.principal, use_principal.current]);\r\n\r\n    return (\r\n        <fieldset>\r\n            <legend>Mortgage</legend>\r\n            <Label\r\n                name=\"Use principal\"\r\n                help=\"Will you be using all your principal or some of it? If you want a higher downpayment, then also increase your principal, as you can use that money from the downpayment for investments.\"\r\n            >\r\n                <Checkbox\r\n                    value={use_principal.current}\r\n                    onChange={use_principal.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Downpayment\"\r\n                help=\"What will be the downpayment on this property? The maximum will be the 'Principal' set earlier.\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={10_000}\r\n                    max={props.principal}\r\n                    value={props.downpayment.current}\r\n                    onChange={props.downpayment.update}\r\n                    enabled={!use_principal.current}\r\n                />\r\n            </Label>\r\n            <Label name=\"Amount\" help=\"The size of the loan.\">\r\n                <CurrencyOutput value={props.valuation(0)} />\r\n            </Label>\r\n            <Label name=\"Length\" help=\"How many years is the mortgage?\">\r\n                <NumberInput\r\n                    min={1}\r\n                    step={1}\r\n                    value={props.length.current}\r\n                    onChange={props.length.update}\r\n                />\r\n            </Label>\r\n            <Label name=\"Interest rate (%)\">\r\n                <PercentInput\r\n                    step={0.1}\r\n                    value={props.rate.current}\r\n                    onChange={props.rate.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Monthly payment\"\r\n                help=\"For a typical mortgage, the interest is compounded monthly and paid monthly until the length of the mortgage.\"\r\n            >\r\n                <CurrencyOutput value={props.monthly_payment} />\r\n            </Label>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\nexport default Mortgage;\r\n","import React from \"react\";\r\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\r\nimport CurrencyOutput from \"./primitive/CurrencyOutput\";\r\nimport Label from \"./primitive/Label\";\r\nimport NumberInput from \"./primitive/NumberInput\";\r\n\r\ninterface Props {\r\n    final_value: number;\r\n    purchase_price: Dynamic<number>;\r\n    roi: Dynamic<number>;\r\n}\r\n\r\nconst Property: React.FC<Props> = (props) => {\r\n    const purchasePrice = props.purchase_price;\r\n    const roi = props.roi;\r\n    const final_value = props.final_value;\r\n\r\n    return (\r\n        <fieldset>\r\n            <legend>Property</legend>\r\n            <Label\r\n                name=\"Purchase Price\"\r\n                help=\"How much will the property cost to buy? This is typically the value of the property.\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={10_000}\r\n                    value={purchasePrice.current}\r\n                    onChange={purchasePrice.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Rate of return\"\r\n                help=\"What is the expected simple rate of return on the property? How much will the house increase/decrease in value each year?\"\r\n            >\r\n                <NumberInput\r\n                    step={1}\r\n                    value={roi.current}\r\n                    onChange={roi.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Final value\"\r\n                help=\"This is the final value of the property.\"\r\n            >\r\n                <CurrencyOutput value={final_value} />\r\n            </Label>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\nexport default Property;\r\n","import React from \"react\";\r\nimport { Dynamic } from \"./model/Dynamic\";\r\nimport Label from \"./primitive/Label\";\r\nimport NumberInput from \"./primitive/NumberInput\";\r\nimport PercentInput from \"./primitive/PercentInput\";\r\n\r\ninterface Props {\r\n    tax_rate: Dynamic<number>;\r\n    maintenance: Dynamic<number>;\r\n    additional: Dynamic<number>;\r\n}\r\n\r\nconst PropertyExpenses: React.FC<Props> = (props) => {\r\n    return (\r\n        <fieldset>\r\n            <legend>Expenses</legend>\r\n            <p className=\"help\">\r\n                These are expenses that are specific to buying and not renting.\r\n                These are typically the hidden costs you might not think of when\r\n                living at a property.\r\n            </p>\r\n            <fieldset>\r\n                <legend>Property Taxes</legend>\r\n                <Label\r\n                    name=\"Rate (%)\"\r\n                    help=\"Most property taxes are a percent of the assessed value of the property. The assess value is essentially the amount the house would be sold for.\"\r\n                >\r\n                    <PercentInput\r\n                        value={props.tax_rate.current}\r\n                        onChange={props.tax_rate.update}\r\n                        step={0.05}\r\n                    />\r\n                </Label>\r\n            </fieldset>\r\n            <Label\r\n                name=\"Maintenance\"\r\n                help=\"How much would you spend per year on maintenance and upkeep of the property? This includes replacing appliances, gardening, plumbing, etc.\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={100}\r\n                    value={props.maintenance.current}\r\n                    onChange={props.maintenance.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Additional Fees\"\r\n                help=\"How much would you spend in additional fees per year? This can include Strata fees if the property is a condo, or even Homeowner Association fees.\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={100}\r\n                    value={props.additional.current}\r\n                    onChange={props.additional.update}\r\n                />\r\n            </Label>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\nexport default PropertyExpenses;\r\n","import React, { useCallback, useEffect, useMemo } from \"react\";\r\nimport { PropertyExpenses as PropertyExpensesData } from \"./model/Buy\";\r\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\r\nimport { Event } from \"./model/Event\";\r\nimport {\r\n    calculate_monthly_rate,\r\n    get_mortgage_values,\r\n    Mortgage as MortgageData,\r\n    MortgageValuation,\r\n} from \"./model/Mortgage\";\r\nimport {\r\n    create_valuation,\r\n    PropertyData,\r\n    PropertyValuation,\r\n} from \"./model/Property\";\r\nimport Mortgage from \"./Mortgage\";\r\nimport Property from \"./Property\";\r\nimport PropertyExpenses from \"./PropertyExpenses\";\r\n\r\ninterface Props {\r\n    years: number;\r\n    principal: number;\r\n    mortgage: {\r\n        downpayment: Dynamic<number>;\r\n        monthly_payment: Dynamic<number>;\r\n        value_at: Event<MortgageValuation>;\r\n    };\r\n    property_value: Event<PropertyValuation>;\r\n    expenses_for: Event<ExpensesFor>;\r\n}\r\n\r\ntype ExpensesFor = (year: number) => PropertyExpensesData;\r\n\r\nfunction useMortgageValuation(data: MortgageData): MortgageValuation {\r\n    const values = useMemo(() => {\r\n        return get_mortgage_values(data);\r\n    }, [data.interest_rate, data.length, data.value]);\r\n\r\n    return useCallback(\r\n        (year) => {\r\n            return values[year];\r\n        },\r\n        [values]\r\n    );\r\n}\r\n\r\nfunction useMortgage(house_price: number) {\r\n    const downpayment = useDynamic(50_000);\r\n    const length = useDynamic(25);\r\n    const rate = useDynamic(3);\r\n\r\n    const data: MortgageData = useMemo(() => {\r\n        return {\r\n            interest_rate: rate.current / 100,\r\n            length: length.current,\r\n            value: house_price - downpayment.current,\r\n        };\r\n    }, [rate.current, length.current, house_price, downpayment.current]);\r\n\r\n    const valuation = useMortgageValuation(data);\r\n    const monthly_payment = calculate_monthly_rate(data);\r\n\r\n    return {\r\n        downpayment,\r\n        length,\r\n        rate,\r\n        valuation,\r\n        monthly_payment,\r\n    };\r\n}\r\n\r\nfunction useProperty() {\r\n    const value = useDynamic(300_000);\r\n    const roi = useDynamic(5);\r\n\r\n    const data: PropertyData = useMemo(() => {\r\n        return {\r\n            initial_value: value.current,\r\n            roi: roi.current / 100,\r\n        };\r\n    }, [value.current, roi.current]);\r\n\r\n    const valuation = useCallback(create_valuation(data), [data]);\r\n\r\n    return {\r\n        value,\r\n        roi,\r\n        valuation,\r\n    };\r\n}\r\n\r\nfunction usePropertyExpenses() {\r\n    const tax_rate = useDynamic(3);\r\n    const maintenance = useDynamic(0);\r\n    const additional = useDynamic(0);\r\n\r\n    return {\r\n        tax_rate,\r\n        maintenance,\r\n        additional,\r\n    };\r\n}\r\n\r\ninterface ExpensesForData {\r\n    property_value: PropertyValuation;\r\n    property_tax_rate: number;\r\n    maintenance: number;\r\n    additional: number;\r\n}\r\n\r\nfunction useTotalExpenses(data: ExpensesForData): ExpensesFor {\r\n    return useCallback(\r\n        (year: number): PropertyExpensesData => {\r\n            return {\r\n                tax: data.property_value(year) * data.property_tax_rate,\r\n                maintenance: data.maintenance,\r\n                additional: data.additional,\r\n            };\r\n        },\r\n        [\r\n            data.property_tax_rate,\r\n            data.property_value,\r\n            data.additional,\r\n            data.maintenance,\r\n        ]\r\n    );\r\n}\r\n\r\nconst Buy: React.FC<Props> = (props) => {\r\n    const property = useProperty();\r\n    const mortgage = useMortgage(property.value.current);\r\n    const expenses = usePropertyExpenses();\r\n    const total_expenses_for = useTotalExpenses({\r\n        property_value: property.valuation,\r\n        property_tax_rate: expenses.tax_rate.current / 100,\r\n        additional: expenses.additional.current,\r\n        maintenance: expenses.maintenance.current,\r\n    });\r\n\r\n    useEffect(() => {\r\n        props.mortgage.value_at(mortgage.valuation);\r\n        props.mortgage.monthly_payment.update(mortgage.monthly_payment);\r\n        props.mortgage.downpayment.update(mortgage.downpayment.current);\r\n        props.expenses_for(total_expenses_for);\r\n        props.property_value(property.valuation);\r\n    }, [\r\n        mortgage.valuation,\r\n        mortgage.monthly_payment,\r\n        mortgage.downpayment.current,\r\n        total_expenses_for,\r\n        property.valuation,\r\n    ]);\r\n\r\n    return (\r\n        <section className=\"buy\">\r\n            <h3>Buying</h3>\r\n            <Property\r\n                purchase_price={property.value}\r\n                roi={property.roi}\r\n                final_value={property.valuation(props.years)}\r\n            />\r\n            <Mortgage\r\n                principal={props.principal}\r\n                rate={mortgage.rate}\r\n                length={mortgage.length}\r\n                valuation={mortgage.valuation}\r\n                downpayment={mortgage.downpayment}\r\n                monthly_payment={mortgage.monthly_payment}\r\n            />\r\n            <PropertyExpenses\r\n                tax_rate={expenses.tax_rate}\r\n                maintenance={expenses.maintenance}\r\n                additional={expenses.additional}\r\n            />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Buy;\r\n","export type PropertyValuation = (year: number) => number;\r\n\r\nexport interface PropertyData {\r\n    initial_value: number;\r\n    roi: number;\r\n}\r\n\r\nexport function create_valuation(data: PropertyData): PropertyValuation {\r\n    return (year: number) => {\r\n        return data.initial_value * (1 + data.roi * year);\r\n    };\r\n}\r\n","import React, { useCallback, useEffect, useMemo } from \"react\";\r\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\r\nimport {\r\n    create_valuation,\r\n    RentValuation,\r\n    RentValuationData,\r\n} from \"./model/RentPlace\";\r\nimport Checkbox from \"./primitive/Checkbox\";\r\nimport CurrencyOutput from \"./primitive/CurrencyOutput\";\r\nimport Label from \"./primitive/Label\";\r\nimport NumberInput from \"./primitive/NumberInput\";\r\n\r\nimport \"./RentPlace.scss\";\r\n\r\ninterface Props {\r\n    true_rent: Dynamic<RentValuation>;\r\n    monthly: {\r\n        utilities: number;\r\n        internet: number;\r\n    };\r\n    years: Length;\r\n}\r\n\r\nexport interface Length {\r\n    value: Dynamic<number>;\r\n    enabled: boolean;\r\n}\r\n\r\ninterface MonthlyData {\r\n    utilities: number;\r\n    internet: number;\r\n}\r\n\r\nconst useRentPlace = (monthly: MonthlyData) => {\r\n    const rent = useDynamic(0);\r\n    const include_utilities = useDynamic(false);\r\n    const include_internet = useDynamic(false);\r\n    const rent_change = useDynamic(0);\r\n\r\n    const data: RentValuationData = useMemo(() => {\r\n        return {\r\n            rent: rent.current,\r\n            rent_change: rent_change.current,\r\n            includes: {\r\n                utilities: include_utilities.current,\r\n                internet: include_internet.current,\r\n            },\r\n            monthly: monthly,\r\n        };\r\n    }, [\r\n        rent.current,\r\n        rent_change.current,\r\n        include_utilities.current,\r\n        include_internet.current,\r\n        monthly.internet,\r\n        monthly.utilities,\r\n    ]);\r\n\r\n    const valuation = useMemo(() => create_valuation(data), [data]);\r\n\r\n    return {\r\n        rent,\r\n        include_utilities,\r\n        include_internet,\r\n        rent_change,\r\n        valuation,\r\n    };\r\n};\r\n\r\nconst RentPlace: React.FC<Props> = (props) => {\r\n    const {\r\n        rent,\r\n        include_utilities,\r\n        include_internet,\r\n        rent_change,\r\n        valuation,\r\n    } = useRentPlace(props.monthly);\r\n\r\n    useEffect(() => {\r\n        props.true_rent.update(valuation);\r\n    }, [valuation]);\r\n\r\n    return (\r\n        <fieldset className=\"place\">\r\n            <Label\r\n                name=\"Monthly rent\"\r\n                help=\"How much do you spend per month on rent?\"\r\n            >\r\n                <NumberInput\r\n                    min={0}\r\n                    step={100}\r\n                    value={rent.current}\r\n                    onChange={rent.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Includes utilities\"\r\n                help=\"Does the rent include utilities?\"\r\n            >\r\n                <Checkbox\r\n                    value={include_utilities.current}\r\n                    onChange={include_utilities.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Includes internet\"\r\n                help=\"Does the rent include internet?\"\r\n            >\r\n                <Checkbox\r\n                    value={include_internet.current}\r\n                    onChange={include_internet.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Years renting\"\r\n                help=\"How many years do you expect staying here?\"\r\n            >\r\n                <NumberInput\r\n                    min={1}\r\n                    step={1}\r\n                    value={props.years.value.current}\r\n                    onChange={props.years.value.update}\r\n                    enabled={props.years.enabled}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"Rent change ($)\"\r\n                help=\"How much will rent increase/decrease per year?\"\r\n            >\r\n                <NumberInput\r\n                    step={50}\r\n                    value={rent_change.current}\r\n                    onChange={rent_change.update}\r\n                />\r\n            </Label>\r\n            <Label\r\n                name=\"True monthly rent\"\r\n                help=\"This is your rent plus additional costs if they're not included.\"\r\n            >\r\n                <CurrencyOutput value={valuation(1)} />\r\n            </Label>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\nexport default RentPlace;\r\n","export type RentValuation = (year: number) => number;\r\n\r\nexport interface RentPlace {\r\n    value_at: RentValuation;\r\n    years: number;\r\n}\r\n\r\nexport interface RentValuationData {\r\n    rent: number;\r\n    rent_change: number;\r\n    includes: {\r\n        utilities: boolean;\r\n        internet: boolean;\r\n    };\r\n    monthly: MonthlyData;\r\n}\r\n\r\ninterface MonthlyData {\r\n    utilities: number;\r\n    internet: number;\r\n}\r\n\r\nexport function create_valuation(data: RentValuationData): RentValuation {\r\n    return (year) => {\r\n        return (\r\n            data.rent +\r\n            data.rent_change * (year - 1) +\r\n            (data.includes.utilities ? 0 : data.monthly.utilities) +\r\n            (data.includes.internet ? 0 : data.monthly.internet)\r\n        );\r\n    };\r\n}\r\n","/* eslint-disable no-extend-native */\r\n\r\ndeclare global {\r\n    interface Array<T> {\r\n        sum(this: number[]): number;\r\n        zip<K>(other: K[]): [T, K][];\r\n        zip_with<K, Z>(other: K[], fn: (tuple: [T, K]) => Z): Z[];\r\n        replace_at(index: number, value: T): T[];\r\n    }\r\n}\r\n\r\nexport function sum(this: number[]): number {\r\n    return this.reduce((acc, x) => acc + x, 0);\r\n}\r\n\r\nArray.prototype.sum = sum;\r\n\r\nexport function zip<T, K>(this: T[], other: K[]): [T, K][] {\r\n    const min_length = Math.min(this.length, other.length);\r\n\r\n    return this.filter((_, i) => i < min_length).map((value, i) => [\r\n        value,\r\n        other[i],\r\n    ]);\r\n}\r\n\r\nArray.prototype.zip = zip;\r\n\r\nexport function zip_with<T, K, Z>(\r\n    this: T[],\r\n    other: K[],\r\n    fn: (tuple: [T, K]) => Z\r\n): Z[] {\r\n    return this.zip(other).map(fn);\r\n}\r\n\r\nArray.prototype.zip_with = zip_with;\r\n\r\nexport function replace_at<T>(this: T[], index: number, value: T): T[] {\r\n    return this.map((x, i) => (i === index ? value : x));\r\n}\r\n\r\nArray.prototype.replace_at = replace_at;\r\n","import { RentPlace, RentValuation } from \"./RentPlace\";\r\n\r\nexport interface RentPlaces {\r\n    initial: RentPlace[];\r\n    last: RentValuation;\r\n}\r\n\r\nexport function calculate_total_rent_for(\r\n    places: RentPlaces,\r\n    year: number\r\n): number {\r\n    for (const place of places.initial) {\r\n        if (year <= place.years) {\r\n            return place.value_at(year) * 12;\r\n        }\r\n\r\n        year -= place.years;\r\n    }\r\n\r\n    return places.last(year) * 12;\r\n}\r\n\r\nexport function calculate_last_year(\r\n    total_years: number,\r\n    places: RentPlaces\r\n): number {\r\n    return total_years - places.initial.map((p) => p.years).sum();\r\n}\r\n\r\nexport function update_last(\r\n    places: RentPlaces,\r\n    new_valuation: RentValuation\r\n): RentPlaces {\r\n    return {\r\n        ...places,\r\n        last: new_valuation,\r\n    };\r\n}\r\n\r\nexport function can_add(total_years: number, places: RentPlaces): boolean {\r\n    return calculate_last_year(total_years, places) > 1;\r\n}\r\n\r\nexport function add(places: RentPlaces): RentPlaces {\r\n    const last: RentPlace = {\r\n        value_at: places.last,\r\n        years: 1,\r\n    };\r\n\r\n    return {\r\n        initial: [...places.initial, last],\r\n        last: (_) => 0,\r\n    };\r\n}\r\n\r\nexport function update_at(\r\n    places: RentPlaces,\r\n    index: number,\r\n    place: Partial<RentPlace>\r\n): RentPlaces {\r\n    const current_place = places.initial[index];\r\n\r\n    const new_place = {\r\n        ...current_place,\r\n        ...place,\r\n    };\r\n\r\n    return {\r\n        ...places,\r\n        initial: [\r\n            ...places.initial.slice(0, index),\r\n            new_place,\r\n            ...places.initial.slice(index + 1),\r\n        ],\r\n    };\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { Dynamic, useDynamic } from \"./model/Dynamic\";\r\nimport { RentPlace as RentPlaceData, RentValuation } from \"./model/RentPlace\";\r\nimport RentPlace, { Length } from \"./RentPlace\";\r\nimport \"./model/Array\";\r\nimport { Event } from \"./model/Event\";\r\n\r\nimport * as R from \"ramda\";\r\nimport {\r\n    add,\r\n    calculate_last_year,\r\n    calculate_total_rent_for,\r\n    can_add,\r\n    RentPlaces as RentPlacesData,\r\n    update_at,\r\n    update_last,\r\n} from \"./model/RentPlaces\";\r\n\r\nimport \"./RentPlaces.scss\";\r\n\r\ninterface Props {\r\n    years: number;\r\n    monthly: {\r\n        utilities: number;\r\n        internet: number;\r\n    };\r\n    valuation: Event<RentValuation>;\r\n}\r\n\r\nfunction useRentPlaces(total_years: number) {\r\n    const places = useDynamic<RentPlacesData>({\r\n        initial: [],\r\n        last: (_) => 0,\r\n    });\r\n\r\n    const valuation = useCallback(\r\n        R.partial(calculate_total_rent_for, [places.current]),\r\n        [places.current]\r\n    );\r\n\r\n    return {\r\n        places: places.current,\r\n        add_enabled: can_add(total_years, places.current),\r\n        add: () => {\r\n            places.update(add(places.current));\r\n        },\r\n        update_initial: (index: number, new_place: Partial<RentPlaceData>) => {\r\n            places.update(update_at(places.current, index, new_place));\r\n        },\r\n        update_last: (valuation: RentValuation) => {\r\n            places.update(update_last(places.current, valuation));\r\n        },\r\n        valuation,\r\n    };\r\n}\r\n\r\ninterface LastRentPlaceProps {\r\n    valuation: RentValuation;\r\n    update_last: (valuation: RentValuation) => void;\r\n    years: number;\r\n    monthly: {\r\n        utilities: number;\r\n        internet: number;\r\n    };\r\n}\r\n\r\nconst LastRentPlace: React.FC<LastRentPlaceProps> = (props) => {\r\n    const true_rent = {\r\n        current: props.valuation,\r\n        update: props.update_last,\r\n    };\r\n\r\n    const length: Length = {\r\n        enabled: false,\r\n        value: {\r\n            current: props.years,\r\n            update: (_) => {\r\n                throw new Error(\"Can't update last place's years.\");\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <RentPlace\r\n            true_rent={true_rent}\r\n            monthly={props.monthly}\r\n            years={length}\r\n        />\r\n    );\r\n};\r\n\r\nconst RentPlaces: React.FC<Props> = (props) => {\r\n    const {\r\n        places,\r\n        add,\r\n        update_initial,\r\n        update_last,\r\n        add_enabled,\r\n        valuation: total_valuation,\r\n    } = useRentPlaces(props.years);\r\n\r\n    useEffect(() => {\r\n        props.valuation(total_valuation);\r\n    }, [total_valuation]);\r\n\r\n    return (\r\n        <section className=\"places\">\r\n            <ol>\r\n                {places.initial.map((place, index) => {\r\n                    const true_rent: Dynamic<RentValuation> = {\r\n                        current: place.value_at,\r\n                        update: (new_valuation) => {\r\n                            update_initial(index, { value_at: new_valuation });\r\n                        },\r\n                    };\r\n\r\n                    const years: Length = {\r\n                        value: {\r\n                            current: place.years,\r\n                            update: (new_year) => {\r\n                                update_initial(index, { years: new_year });\r\n                            },\r\n                        },\r\n                        enabled: true,\r\n                    };\r\n\r\n                    return (\r\n                        <li key={index}>\r\n                            <RentPlace\r\n                                true_rent={true_rent}\r\n                                monthly={props.monthly}\r\n                                years={years}\r\n                            />\r\n                        </li>\r\n                    );\r\n                })}\r\n                <li>\r\n                    <LastRentPlace\r\n                        monthly={props.monthly}\r\n                        update_last={update_last}\r\n                        valuation={places.last}\r\n                        years={calculate_last_year(props.years, places)}\r\n                    />\r\n                </li>\r\n            </ol>\r\n            <button onClick={add} disabled={!add_enabled}>\r\n                Add place to rent\r\n            </button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default RentPlaces;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDynamic } from \"./model/Dynamic\";\r\nimport { Event } from \"./model/Event\";\r\nimport { RentValuation } from \"./model/RentPlace\";\r\nimport RentPlacesData from \"./RentPlaces\";\r\n\r\ninterface Props {\r\n    years: number;\r\n    monthly: {\r\n        utilities: number;\r\n        internet: number;\r\n    };\r\n    onRentChange: Event<RentValuation>;\r\n}\r\n\r\nfunction useRent() {\r\n    const valuation = useDynamic<RentValuation>((_) => 0);\r\n\r\n    return {\r\n        valuation,\r\n    };\r\n}\r\n\r\nconst Rent: React.FC<Props> = (props) => {\r\n    const { valuation } = useRent();\r\n\r\n    useEffect(() => {\r\n        props.onRentChange(valuation.current);\r\n    }, [valuation.current]);\r\n\r\n    return (\r\n        <section className=\"rent\">\r\n            <h3>Renting</h3>\r\n            <RentPlacesData\r\n                years={props.years}\r\n                monthly={props.monthly}\r\n                valuation={valuation.update}\r\n            />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Rent;\r\n","import React from \"react\";\r\nimport CurrencyOutput from \"./primitive/CurrencyOutput\";\r\n\r\ninterface Props {\r\n    rent: number;\r\n    buy: number;\r\n}\r\n\r\nconst Summary: React.FC<Props> = (props) => {\r\n    return (\r\n        <header>\r\n            <h2>Summary</h2>\r\n            <section className=\"rent\">\r\n                <h3>Renting</h3>\r\n                <strong>Asset Value</strong>\r\n                <CurrencyOutput value={props.rent} />\r\n            </section>\r\n            <section className=\"buy\">\r\n                <h3>Buying</h3>\r\n                <CurrencyOutput value={props.buy} />\r\n                <strong>Asset Value</strong>\r\n            </section>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Summary;\r\n","import React from \"react\";\r\nimport CurrencyOutput, {\r\n    Props as CurrencyOutputProps,\r\n} from \"./primitive/CurrencyOutput\";\r\nimport { AccountTree } from \"./model/Account\";\r\nimport \"./TOutline.scss\";\r\n\r\nexport interface Props {\r\n    left: AccountTree;\r\n    right: AccountTree;\r\n}\r\n\r\nconst BlockCurrencyOutput: React.FC<CurrencyOutputProps> = (props) => {\r\n    return (\r\n        <div>\r\n            <CurrencyOutput {...props} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Account: React.FC<AccountTree> = (props) => {\r\n    const details = props.children || [];\r\n    return (\r\n        <section className=\"account\">\r\n            <strong>{props.name}</strong>\r\n            <BlockCurrencyOutput value={props.value} />\r\n            {details.map((detail) => (\r\n                <Account key={detail.name} {...detail} />\r\n            ))}\r\n        </section>\r\n    );\r\n};\r\n\r\nconst TOutline: React.FC<Props> = (props) => {\r\n    const details = {\r\n        left: props.left.children || [],\r\n        right: props.right.children || [],\r\n    };\r\n\r\n    return (\r\n        <section className=\"taccount\">\r\n            <header>\r\n                <h5>{props.left.name}</h5>\r\n                <h5>{props.right.name}</h5>\r\n            </header>\r\n            <section className=\"left\">\r\n                {details.left.map((detail) => {\r\n                    return <Account key={detail.name} {...detail} />;\r\n                })}\r\n            </section>\r\n            <section className=\"right\">\r\n                {details.right.map((detail) => {\r\n                    return <Account key={detail.name} {...detail} />;\r\n                })}\r\n            </section>\r\n            <footer>\r\n                <BlockCurrencyOutput value={props.left.value} />\r\n                <BlockCurrencyOutput value={props.right.value} />\r\n            </footer>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default TOutline;\r\n","import React from \"react\";\r\nimport TOutline, { Props as TAccountProps } from \"./TOutline\";\r\nimport { ValueProp as BreakdownProps } from \"./Breakdown\";\r\n\r\nimport \"./DualBreakdown.scss\";\r\nimport { useDynamic } from \"./model/Dynamic\";\r\nimport {\r\n    Capital,\r\n    CapitalAccounts,\r\n    OptionBreakdownAccounts,\r\n    Profit,\r\n} from \"./model/Option\";\r\nimport { AccountTree, from_accounts } from \"./model/Account\";\r\n\r\ntype Props = Dual<OptionBreakdownAccounts> & {\r\n    years: number;\r\n};\r\n\r\ninterface Dual<T> {\r\n    rent: T;\r\n    buy: T;\r\n}\r\n\r\ninterface YearSelectProps {\r\n    years: number;\r\n    value: number;\r\n    onChange: (year: number) => void;\r\n}\r\n\r\nconst YearSelect: React.FC<YearSelectProps> = (props) => {\r\n    const year_options: JSX.Element[] = [];\r\n\r\n    for (let year = 1; year <= props.years; year++) {\r\n        year_options.push(\r\n            <option selected={year === props.value} value={year}>\r\n                Year {year}\r\n            </option>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={props.years}\r\n            step={1}\r\n            value={props.value}\r\n            onChange={(e) => props.onChange(+e.target.value)}\r\n        />\r\n    );\r\n};\r\n\r\nconst BalanceOutline: React.FC<Capital<AccountTree, AccountTree>> = (props) => {\r\n    return <TOutline left={props.assets} right={props.liabilities} />;\r\n};\r\n\r\nconst IncomeOutline: React.FC<Profit<AccountTree, AccountTree>> = (props) => {\r\n    return <TOutline left={props.income} right={props.expenses} />;\r\n};\r\n\r\nconst DualBreakdown: React.FC<Props> = (props) => {\r\n    const year_select = useDynamic(1);\r\n\r\n    const year_breakdown = {\r\n        rent: props.rent.years[year_select.current - 1],\r\n        buy: props.buy.years[year_select.current - 1],\r\n    };\r\n\r\n    return (\r\n        <section id=\"breakdown\">\r\n            <h3>Breakdown</h3>\r\n            <section className=\"initial\">\r\n                <h4>Initial</h4>\r\n                <BalanceOutline {...props.rent.initial} />\r\n                <BalanceOutline {...props.buy.initial} />\r\n            </section>\r\n            <h4>Year {year_select.current}</h4>\r\n            <YearSelect\r\n                value={year_select.current}\r\n                onChange={year_select.update}\r\n                years={props.years}\r\n            />\r\n            <section className=\"year\">\r\n                <section className=\"rent\">\r\n                    <IncomeOutline {...year_breakdown.rent.profit} />\r\n                    <BalanceOutline {...year_breakdown.rent.capital} />\r\n                </section>\r\n                <section className=\"buy\">\r\n                    <IncomeOutline {...year_breakdown.buy.profit} />\r\n                    <BalanceOutline {...year_breakdown.buy.capital} />\r\n                </section>\r\n            </section>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default DualBreakdown;\r\n","interface LeafAccount {\r\n    name: string;\r\n    value: number;\r\n}\r\n\r\nexport type AccountTree = LeafAccount & { children: AccountTree[] };\r\n\r\nexport function leaf_account(name: string, value: number): AccountTree {\r\n    return {\r\n        name,\r\n        value,\r\n        children: [],\r\n    };\r\n}\r\n\r\nfunction tree_sum(tree: AccountTree): number {\r\n    if (tree.value !== undefined) {\r\n        return tree.value;\r\n    }\r\n\r\n    return tree.children.map((c) => tree_sum(c)).sum();\r\n}\r\n\r\nexport function from_accounts(\r\n    name: string,\r\n    children: AccountTree[],\r\n    value?: number\r\n): AccountTree {\r\n    return {\r\n        name,\r\n        value: value ?? children.map(tree_sum).sum(),\r\n        children: children,\r\n    };\r\n}\r\n\r\nexport function to_account(name: string, value: number): LeafAccount {\r\n    return {\r\n        name,\r\n        value,\r\n    };\r\n}\r\n","import { AccountTree, from_accounts } from \"./Account\";\r\nimport { PropertyExpenses } from \"./Buy\";\r\n\r\nexport interface BothIncome {\r\n    investments: number;\r\n    salary: number;\r\n}\r\n\r\nexport interface Capital<A, L> {\r\n    assets: A;\r\n    liabilities: L;\r\n}\r\n\r\nexport interface Profit<I, E> {\r\n    income: I;\r\n    expenses: E;\r\n}\r\n\r\nexport interface OptionBreakdownYear<C, P> {\r\n    capital: C;\r\n    profit: P;\r\n}\r\n\r\nexport interface OptionBreakdown<C, P> {\r\n    initial: C;\r\n    years: OptionBreakdownYear<C, P>[];\r\n    final: C;\r\n}\r\n\r\nexport function evaluate_option<C, P>(\r\n    initial: C,\r\n    eval_year: (prev_capital: C, year: number) => OptionBreakdownYear<C, P>,\r\n    num_years: number\r\n): OptionBreakdown<C, P> {\r\n    let year_breakdowns: OptionBreakdownYear<C, P>[] = [];\r\n    let prev_capital = initial;\r\n\r\n    for (let year = 1; year <= num_years; year++) {\r\n        const breakdown = eval_year(prev_capital, year);\r\n\r\n        prev_capital = breakdown.capital;\r\n\r\n        year_breakdowns.push(breakdown);\r\n    }\r\n\r\n    const final = year_breakdowns[year_breakdowns.length - 1].capital;\r\n\r\n    return {\r\n        initial: initial,\r\n        years: year_breakdowns,\r\n        final: final,\r\n    };\r\n}\r\n\r\nexport type CapitalAccounts = Capital<AccountTree[], AccountTree[]>;\r\nexport type ProfitAccounts = Profit<AccountTree[], AccountTree[]>;\r\n\r\nexport type CapitalAccount = Capital<AccountTree, AccountTree>;\r\nexport type ProfitAccount = Profit<AccountTree, AccountTree>;\r\n\r\nexport type OptionBreakdownAccounts = OptionBreakdown<\r\n    CapitalAccount,\r\n    ProfitAccount\r\n>;\r\n\r\nfunction get_capital_account(data: CapitalAccounts): CapitalAccount {\r\n    return {\r\n        assets: from_accounts(\"Assets\", data.assets),\r\n        liabilities: from_accounts(\"Liabilities\", data.liabilities),\r\n    };\r\n}\r\n\r\nfunction get_profit_account(data: ProfitAccounts): ProfitAccount {\r\n    return {\r\n        income: from_accounts(\"Income\", data.income),\r\n        expenses: from_accounts(\"Expenses\", data.expenses),\r\n    };\r\n}\r\n\r\nexport function get_breakdown(\r\n    data: OptionBreakdown<CapitalAccounts, ProfitAccounts>\r\n): OptionBreakdownAccounts {\r\n    const initial = get_capital_account(data.initial);\r\n\r\n    const years = data.years.map((year) => {\r\n        return {\r\n            capital: get_capital_account(year.capital),\r\n            profit: get_profit_account(year.profit),\r\n        };\r\n    });\r\n\r\n    const final = get_capital_account(data.final);\r\n\r\n    return {\r\n        initial,\r\n        years,\r\n        final,\r\n    };\r\n}\r\n","export type Tree<L> =\r\n    | L\r\n    | {\r\n          value: L;\r\n          children: Tree<L>[];\r\n      };\r\n\r\nexport type NumberTree<T> = number | { [x in keyof T]: NumberTree<T[x]> };\r\n\r\nexport function total<T>(tree: NumberTree<T>): number {\r\n    if (typeof tree === \"number\") {\r\n        return tree;\r\n    }\r\n\r\n    let sum = 0;\r\n    for (const x in tree) {\r\n        sum += total(tree[x]);\r\n    }\r\n\r\n    return sum;\r\n}\r\n","import { add } from \"ramda\";\r\nimport { AccountTree, from_accounts, leaf_account } from \"./Account\";\r\nimport {\r\n    BothIncome,\r\n    Capital,\r\n    CapitalAccounts,\r\n    evaluate_option,\r\n    get_breakdown,\r\n    OptionBreakdown,\r\n    OptionBreakdownAccounts,\r\n    OptionBreakdownYear,\r\n    Profit,\r\n    ProfitAccounts,\r\n} from \"./Option\";\r\nimport { PropertyValuation } from \"./Property\";\r\nimport { NumberTree, total } from \"./Tree\";\r\n\r\nexport interface BuyData {\r\n    years: number;\r\n    assets: {\r\n        property: PropertyValuation;\r\n        principal: number;\r\n    };\r\n    income: {\r\n        salary: number;\r\n        roi: number;\r\n    };\r\n    expenses: {\r\n        monthly: MonthlyExpenses;\r\n        mortgage: Mortgage;\r\n        property: (year: number) => PropertyExpenses;\r\n    };\r\n}\r\n\r\ninterface MonthlyExpenses {\r\n    utilities: number;\r\n    internet: number;\r\n    other: number;\r\n}\r\n\r\ninterface Mortgage {\r\n    downpayment: number;\r\n    value_at: (year: number) => number;\r\n    monthly_payment: number;\r\n}\r\n\r\ninterface BuyAssets {\r\n    investments: number;\r\n    property: number;\r\n}\r\n\r\ninterface BuyLiabilities {\r\n    mortgage: number;\r\n}\r\n\r\ninterface BuyExpenses {\r\n    monthly: {\r\n        utilities: number;\r\n        internet: number;\r\n        other: number;\r\n    };\r\n    mortgage: number;\r\n    property: PropertyExpenses;\r\n}\r\n\r\nexport interface PropertyExpenses {\r\n    tax: number;\r\n    maintenance: number;\r\n    additional: number;\r\n}\r\n\r\ntype BuyCapital = Capital<BuyAssets, BuyLiabilities>;\r\ntype BuyProfit = Profit<BothIncome, BuyExpenses>;\r\n\r\ntype BuyBreakdown = OptionBreakdown<BuyCapital, BuyProfit>;\r\ntype BuyBreakdownYear = OptionBreakdownYear<BuyCapital, BuyProfit>;\r\n\r\nexport function calculate_buy_breakdown(data: BuyData): BuyBreakdown {\r\n    const initial: Capital<BuyAssets, BuyLiabilities> = {\r\n        assets: {\r\n            investments:\r\n                data.assets.principal - data.expenses.mortgage.downpayment,\r\n            property: data.assets.property(0),\r\n        },\r\n        liabilities: {\r\n            mortgage: data.expenses.mortgage.value_at(0),\r\n        },\r\n    };\r\n\r\n    const fn = (prev_capital: BuyCapital, year: number): BuyBreakdownYear => {\r\n        const income: BothIncome = {\r\n            investments:\r\n                prev_capital.assets.investments * (data.income.roi / 100),\r\n            salary: data.income.salary,\r\n        };\r\n        const expenses: BuyExpenses = {\r\n            monthly: data.expenses.monthly,\r\n            mortgage: data.expenses.mortgage.monthly_payment * 12,\r\n            property: data.expenses.property(year),\r\n        };\r\n\r\n        const total_income = total(income);\r\n        const total_expenses = total(expenses);\r\n\r\n        const profit = total_income - total_expenses;\r\n\r\n        const assets: BuyAssets = {\r\n            investments: prev_capital.assets.investments + profit,\r\n            property: data.assets.property(year),\r\n        };\r\n        const liabilities: BuyLiabilities = {\r\n            mortgage: data.expenses.mortgage.value_at(year),\r\n        };\r\n\r\n        return {\r\n            capital: {\r\n                assets,\r\n                liabilities,\r\n            },\r\n            profit: {\r\n                income,\r\n                expenses,\r\n            },\r\n        };\r\n    };\r\n\r\n    return evaluate_option(initial, fn, data.years);\r\n}\r\n\r\nfunction get_capital_accounts(data: BuyCapital): CapitalAccounts {\r\n    const investments = leaf_account(\"Investments\", data.assets.investments);\r\n    const property = leaf_account(\"Property\", data.assets.property);\r\n    const assets = [investments, property];\r\n\r\n    const mortgage = leaf_account(\"Mortgage\", data.liabilities.mortgage);\r\n    const liabilities = [mortgage];\r\n\r\n    return {\r\n        assets,\r\n        liabilities,\r\n    };\r\n}\r\n\r\nfunction get_property_accounts(data: PropertyExpenses): AccountTree {\r\n    const tax = leaf_account(\"Tax\", data.tax);\r\n    const maintenance = leaf_account(\"Maintenance\", data.maintenance);\r\n    const additional = leaf_account(\"Additional\", data.additional);\r\n\r\n    return from_accounts(\"Property\", [tax, maintenance, additional]);\r\n}\r\n\r\nfunction get_monthly_accounts(data: MonthlyExpenses): AccountTree {\r\n    const utilities = leaf_account(\"Utilities\", data.utilities);\r\n    const internet = leaf_account(\"Internet\", data.internet);\r\n    const other = leaf_account(\"Other\", data.other);\r\n\r\n    return from_accounts(\"Monthly\", [utilities, internet, other]);\r\n}\r\n\r\nfunction get_profit_accounts(data: BuyProfit): ProfitAccounts {\r\n    const property = get_property_accounts(data.expenses.property);\r\n    const mortgage = leaf_account(\"Mortgage\", data.expenses.mortgage);\r\n    const monthly = get_monthly_accounts(data.expenses.monthly);\r\n\r\n    const expenses = [property, mortgage, monthly];\r\n\r\n    const investments = leaf_account(\"Investments\", data.income.investments);\r\n    const salary = leaf_account(\"Salary\", data.income.salary);\r\n\r\n    const income = [investments, salary];\r\n\r\n    return {\r\n        expenses,\r\n        income,\r\n    };\r\n}\r\n\r\nexport function get_buy_breakdown(data: BuyBreakdown): OptionBreakdownAccounts {\r\n    const initial = get_capital_accounts(data.initial);\r\n    const years = data.years.map(\r\n        (year): OptionBreakdownYear<CapitalAccounts, ProfitAccounts> => {\r\n            return {\r\n                capital: get_capital_accounts(year.capital),\r\n                profit: get_profit_accounts(year.profit),\r\n            };\r\n        }\r\n    );\r\n    const final = get_capital_accounts(data.final);\r\n\r\n    return get_breakdown({\r\n        initial,\r\n        years,\r\n        final,\r\n    });\r\n}\r\n","import { leaf_account } from \"./Account\";\r\nimport {\r\n    BothIncome,\r\n    Capital,\r\n    CapitalAccounts,\r\n    evaluate_option,\r\n    get_breakdown,\r\n    OptionBreakdown,\r\n    OptionBreakdownAccounts,\r\n    OptionBreakdownYear,\r\n    Profit,\r\n    ProfitAccounts,\r\n} from \"./Option\";\r\nimport { RentValuation } from \"./RentPlace\";\r\n\r\nexport interface RentData {\r\n    years: number;\r\n    principal: number;\r\n    income: {\r\n        salary: number;\r\n        roi: number;\r\n    };\r\n    expenses: {\r\n        rent: RentValuation;\r\n        other: number;\r\n    };\r\n}\r\n\r\ninterface RentAssets {\r\n    investments: number;\r\n}\r\n\r\ninterface RentLiabilities {}\r\n\r\ninterface RentExpenses {\r\n    rent: number;\r\n    other: number;\r\n}\r\n\r\ntype RentCapital = Capital<RentAssets, RentLiabilities>;\r\ntype RentProfit = Profit<BothIncome, RentExpenses>;\r\n\r\ntype RentBreakdown = OptionBreakdown<RentCapital, RentProfit>;\r\ntype RentBreakdownYear = OptionBreakdownYear<RentCapital, RentProfit>;\r\n\r\nexport function calculate_rent_breakdown(data: RentData): RentBreakdown {\r\n    const initial = {\r\n        assets: {\r\n            investments: data.principal,\r\n        },\r\n        liabilities: {},\r\n    };\r\n\r\n    const fn = (prev_capital: RentCapital, year: number): RentBreakdownYear => {\r\n        const income = {\r\n            investments:\r\n                prev_capital.assets.investments * (data.income.roi / 100),\r\n            salary: data.income.salary,\r\n        };\r\n\r\n        const expenses = {\r\n            rent: data.expenses.rent(year),\r\n            other: data.expenses.other * 12,\r\n        };\r\n\r\n        const total_income = income.investments + income.salary;\r\n        const total_expenses = expenses.rent + expenses.other;\r\n\r\n        const profit = total_income - total_expenses;\r\n\r\n        return {\r\n            capital: {\r\n                assets: {\r\n                    investments: prev_capital.assets.investments + profit,\r\n                },\r\n                liabilities: {},\r\n            },\r\n            profit: {\r\n                income,\r\n                expenses,\r\n            },\r\n        };\r\n    };\r\n\r\n    return evaluate_option(initial, fn, data.years);\r\n}\r\n\r\nfunction get_capital_accounts(data: RentCapital): CapitalAccounts {\r\n    const investments = leaf_account(\"Investments\", data.assets.investments);\r\n    const assets = [investments];\r\n\r\n    return {\r\n        assets,\r\n        liabilities: [],\r\n    };\r\n}\r\n\r\nfunction get_profit_accounts(data: RentProfit): ProfitAccounts {\r\n    const rent = leaf_account(\"Rent\", data.expenses.rent);\r\n    const other = leaf_account(\"Other\", data.expenses.other);\r\n\r\n    const expenses = [rent, other];\r\n\r\n    const investments = leaf_account(\"Investments\", data.income.investments);\r\n    const salary = leaf_account(\"Salary\", data.income.salary);\r\n\r\n    const income = [investments, salary];\r\n\r\n    return {\r\n        expenses,\r\n        income,\r\n    };\r\n}\r\n\r\nexport function get_rent_breakdown(data: RentBreakdown) {\r\n    const initial = get_capital_accounts(data.initial);\r\n    const years = data.years.map(\r\n        (year): OptionBreakdownYear<CapitalAccounts, ProfitAccounts> => {\r\n            return {\r\n                capital: get_capital_accounts(year.capital),\r\n                profit: get_profit_accounts(year.profit),\r\n            };\r\n        }\r\n    );\r\n    const final = get_capital_accounts(data.final);\r\n\r\n    return get_breakdown({\r\n        initial,\r\n        years,\r\n        final,\r\n    });\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport \"./App.scss\";\r\nimport Both from \"./Both\";\r\nimport { ValueProp as BreakdownValueProps } from \"./Breakdown\";\r\nimport Buy from \"./Buy\";\r\nimport { useDynamic } from \"./model/Dynamic\";\r\nimport Rent from \"./Rent\";\r\nimport Summary from \"./Summary\";\r\nimport DualBreakdown from \"./DualBreakdown\";\r\nimport {\r\n    BuyData,\r\n    calculate_buy_breakdown,\r\n    get_buy_breakdown,\r\n    PropertyExpenses,\r\n} from \"./model/Buy\";\r\nimport { get_breakdown } from \"./model/Option\";\r\nimport {\r\n    calculate_rent_breakdown,\r\n    get_rent_breakdown,\r\n    RentData,\r\n} from \"./model/Rent\";\r\nimport { NumberTree } from \"./model/Tree\";\r\n\r\ninterface BuyHookData {\r\n    years: number;\r\n    principal: number;\r\n    monthly_expenses: {\r\n        utilities: number;\r\n        internet: number;\r\n        other: number;\r\n    };\r\n    income: {\r\n        salary: number;\r\n        roi: number;\r\n    };\r\n}\r\n\r\nfunction useBuy(data: BuyHookData) {\r\n    const downpayment = useDynamic(50_000);\r\n    const monthly_payment = useDynamic(0);\r\n\r\n    const mortgage_value = useDynamic((year: number): number => 0);\r\n    const mortgage = {\r\n        downpayment: downpayment.current,\r\n        value_at: mortgage_value.current,\r\n        monthly_payment: monthly_payment.current,\r\n    };\r\n\r\n    const house_value = useDynamic((year: number): number => 0);\r\n\r\n    const expenses_for = useDynamic(\r\n        (year: number): PropertyExpenses => {\r\n            return {\r\n                tax: 0,\r\n                additional: 0,\r\n                maintenance: 0,\r\n            };\r\n        }\r\n    );\r\n\r\n    const buy_data: BuyData = useMemo(() => {\r\n        const monthly = {\r\n            utilities: data.monthly_expenses.utilities * 12,\r\n            internet: data.monthly_expenses.internet * 12,\r\n            other: data.monthly_expenses.other * 12,\r\n        };\r\n\r\n        return {\r\n            years: data.years,\r\n            assets: {\r\n                principal: data.principal,\r\n                property: house_value.current,\r\n            },\r\n            income: data.income,\r\n            expenses: {\r\n                monthly: monthly,\r\n                mortgage: mortgage,\r\n                property: expenses_for.current,\r\n            },\r\n        };\r\n    }, [\r\n        data.years,\r\n        data.principal,\r\n        house_value.current,\r\n        data.income,\r\n        data.monthly_expenses.utilities,\r\n        data.monthly_expenses.internet,\r\n        data.monthly_expenses.other,\r\n        mortgage.value_at,\r\n        mortgage.downpayment,\r\n        mortgage.monthly_payment,\r\n        expenses_for.current,\r\n    ]);\r\n\r\n    const buy_breakdown = useMemo(() => {\r\n        return calculate_buy_breakdown(buy_data);\r\n    }, [buy_data]);\r\n\r\n    const profit = useMemo(() => {\r\n        const total_assets =\r\n            buy_breakdown.final.assets.investments +\r\n            buy_breakdown.final.assets.property;\r\n\r\n        const total_liabilities = buy_breakdown.final.liabilities.mortgage;\r\n\r\n        return total_assets - total_liabilities;\r\n    }, [buy_breakdown]);\r\n\r\n    const states = useMemo(() => {\r\n        return get_buy_breakdown(buy_breakdown);\r\n    }, [buy_breakdown]);\r\n\r\n    return {\r\n        mortgage: {\r\n            downpayment,\r\n            value_at: mortgage_value.update,\r\n            monthly_payment,\r\n        },\r\n        property_value: house_value,\r\n        expenses_for,\r\n        profit,\r\n        states,\r\n    };\r\n}\r\n\r\nfunction useIncome() {\r\n    const roi = useDynamic(0);\r\n    const salary = useDynamic(60_000);\r\n\r\n    const current = {\r\n        roi: roi.current,\r\n        salary: salary.current,\r\n    };\r\n\r\n    return {\r\n        roi,\r\n        salary,\r\n        current,\r\n    };\r\n}\r\n\r\nfunction useMonthlyExpenses() {\r\n    const monthly = {\r\n        utilities: useDynamic(0),\r\n        internet: useDynamic(0),\r\n        other: useDynamic(0),\r\n    };\r\n\r\n    const current = {\r\n        utilities: monthly.utilities.current,\r\n        internet: monthly.internet.current,\r\n        other: monthly.other.current,\r\n    };\r\n\r\n    return {\r\n        ...monthly,\r\n        current,\r\n    };\r\n}\r\n\r\ninterface RentHookData {\r\n    years: number;\r\n    principal: number;\r\n    income: {\r\n        salary: number;\r\n        roi: number;\r\n    };\r\n    monthly_expenses: {\r\n        internet: number;\r\n        utilities: number;\r\n        other: number;\r\n    };\r\n}\r\n\r\nfunction useRent(data: RentHookData) {\r\n    const rents = useDynamic((year: number): number => 0);\r\n\r\n    const monthly_data = useMemo(() => {\r\n        return {\r\n            internet: data.monthly_expenses.internet,\r\n            utilities: data.monthly_expenses.utilities,\r\n        };\r\n    }, [data.monthly_expenses.utilities, data.monthly_expenses.internet]);\r\n\r\n    const rent_data: RentData = useMemo(() => {\r\n        return {\r\n            years: data.years,\r\n            principal: data.principal,\r\n            income: data.income,\r\n            expenses: {\r\n                rent: rents.current,\r\n                other: data.monthly_expenses.other,\r\n            },\r\n        };\r\n    }, [\r\n        data.years,\r\n        data.principal,\r\n        data.income,\r\n        rents.current,\r\n        data.monthly_expenses.other,\r\n    ]);\r\n\r\n    const rent_breakdown = useMemo(() => {\r\n        return calculate_rent_breakdown(rent_data);\r\n    }, [rent_data]);\r\n\r\n    const profit = useMemo(() => {\r\n        const final_capital = rent_breakdown.final;\r\n        return final_capital.assets.investments;\r\n    }, [rent_data]);\r\n\r\n    const states = useMemo(() => {\r\n        return get_rent_breakdown(rent_breakdown);\r\n    }, [rent_breakdown]);\r\n\r\n    return {\r\n        states,\r\n        profit,\r\n        monthly_data,\r\n        update: rents.update,\r\n    };\r\n}\r\n\r\nfunction useBoth() {\r\n    const years = useDynamic(10);\r\n    const principal = useDynamic(100_000);\r\n\r\n    const monthly_expenses = useMonthlyExpenses();\r\n    const income = useIncome();\r\n\r\n    return {\r\n        years,\r\n        principal,\r\n        monthly_expenses,\r\n        income,\r\n    };\r\n}\r\n\r\nconst App: React.FC = () => {\r\n    const both = useBoth();\r\n    const rent = useRent({\r\n        years: both.years.current,\r\n        principal: both.principal.current,\r\n        income: both.income.current,\r\n        monthly_expenses: both.monthly_expenses.current,\r\n    });\r\n    const buy = useBuy({\r\n        years: both.years.current,\r\n        principal: both.principal.current,\r\n        income: both.income.current,\r\n        monthly_expenses: both.monthly_expenses.current,\r\n    });\r\n\r\n    return (\r\n        <main>\r\n            <Summary rent={rent.profit} buy={buy.profit} />\r\n            <Both\r\n                years={both.years}\r\n                monthly={both.monthly_expenses}\r\n                principal={both.principal}\r\n                salary={both.income.salary}\r\n                roi={both.income.roi}\r\n            />\r\n            <Rent\r\n                years={both.years.current}\r\n                monthly={rent.monthly_data}\r\n                onRentChange={rent.update}\r\n            />\r\n            <Buy\r\n                years={both.years.current}\r\n                principal={both.principal.current}\r\n                property_value={buy.property_value.update}\r\n                mortgage={buy.mortgage}\r\n                expenses_for={buy.expenses_for.update}\r\n            />\r\n            <DualBreakdown\r\n                years={both.years.current}\r\n                rent={rent.states}\r\n                buy={buy.states}\r\n            />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}